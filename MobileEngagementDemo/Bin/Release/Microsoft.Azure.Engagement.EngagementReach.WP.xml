<?xml version="1.0"?><doc>
    <assembly>
        <name>Microsoft.Azure.Engagement.EngagementReach.WP</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.Engagement.EngagementReach">
            <summary>
            Engagement Reach handler.
            Initialize the SDK and manage the push queue.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReach.ENGAGEMENT_PUSH_ID_KEY">
            <summary>
            The Engagement push ID key to retrieve of the ID in the launching URI.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReach.sInstance">
            <summary>
            Module sInstance
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReach.syncInstantiation">
            <summary>
            Lock instanciation for thread safety.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReach.Handler">
            <summary>
            Handler to indicate which UI resources the Reach module should use.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReach.OnActivated(Microsoft.Phone.Shell.ActivatedEventArgs)">
            <summary>
            Restore Engagement reach state after an application activation.
            </summary>
            <param name="e">The activation event.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReach.#ctor">
            <summary>
            Create a Engagement Reach.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReach.Init">
            <summary>
            Initialize reach to handle push notification.
            Engagement Agent must be initialized first.
            Your app must add this capability to react to push :
            * <Capability Name="ID_CAP_PUSH_NOTIFICATION"/>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReach.Instance">
            <summary>
            Get the unique Engagement Reach instance.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementReachHandler">
            <summary>
            UI handler for Engagement Reach.
            Override any method you need to customize a component.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachHandler.GetTextViewAnnouncementUri">
            <summary>
            Uri for the text view announcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachHandler.GetWebViewAnnouncementUri">
            <summary>
            Uri for the web view announcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachHandler.GetPollUri">
            <summary>
            Uri for the poll
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachHandler.CreateNotification(Microsoft.Azure.Engagement.EngagementNotificationViewModel)">
            <summary>
            Notification view component that will handle the notification
            </summary>
            <param name="viewModel">The Engagement view model containing data</param>
            <returns>The notification view</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachHandler.GetNotificationPosition(Microsoft.Azure.Engagement.EngagementNotificationViewModel)">
            <summary>
            The position of a notification
            </summary>
            <param name="viewModel">The Engagement view model containing data</param>
            <returns>The position (as a NotificationPosition object), either TOP or BOTTOM</returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementReachHandler.NotificationPosition">
            <summary>
            Available positions for the notification
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReachHandler.NotificationPosition.TOP">
            <summary>
            Top of the screen
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReachHandler.NotificationPosition.BOTTOM">
            <summary>
            Bottom of the screen
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.InteractiveContentStateMachine">
            <summary>
            This class is for internal use only, you don't need to use it directly. 
            It is used for internal serialization into storage.
            This class is shared between platforms and must be public for compatibility purpose.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.InteractiveContentStateMachine.#ctor(Microsoft.Azure.Engagement.EngagementReachContent,Microsoft.Azure.Engagement.InteractiveContentDefaultState)">
            <summary>
            This is only used for serialisation purpose, saving a statemachine in a serialized storage.
            </summary>
            <param name="content">The working content.</param>
            <param name="contentState">The current state in the content life cycle.</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementAnnouncementPage">
            <summary>
            EngagementAnnouncementPage
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementReachPage`2">
            <summary>
            EngagementReachPage
            </summary>
            <typeparam name="GenericViewModel">ViewModel</typeparam>
            <typeparam name="GenericPayload">Payload</typeparam>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementReachPage`2.mEngagementAction">
            <summary>
            Application bar's action button
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.InitializeViewModel">
            <summary>
            Initialize the ViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.InitializeView">
            <summary>
            Initialize view element
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.InitializeApplicationBar">
            <summary>
            The application bar is probably the worst component ever imagined.
            Because we can't use binding, we have to do everything here, by hand.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.CreateViewModel(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            The new constraint of the generic cannot have parameters. This is why we delegate
            the creation to the subclass that will know the real type of the generic.
            Simply override this method, create the view model with the content, and then return
            the result.
            </summary>
            <param name="content">The content from which you must create the viewmodel</param>
            <returns>The real view model</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Go back to the previous page before leaving this reach page then notify the reach module.
            </summary>
            <param name="e">The navigation event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.GoBack">
            <summary>
            Go back in the navigation stack, if possible.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.SetActionLabel(System.String)">
            <summary>
            Set the action field in the application with the action label.
            If the action label is not valid, set the field with the default value.
            </summary>
            <param name="actionLabel">The new value of the field</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.SetExitLabel(System.String)">
            <summary>
            Set the action field in the application with the action label.
            If the action label is not valid, set the field with the default value.
            </summary>
            <param name="exitLabel">The new value of the field</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.GetApplicationBarButton(System.Int32)">
            <summary>
            Unlike other components in the silverlight framework, the Name has no effect for
            an application bar button. If we try to use directly the button, a NullReferenceException
            will be thrown.
            That is why we find in the application bar the button we need for a given index.
            </summary>
            <param name="position">The index of the button</param>
            <returns>The button we must use</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.OnActionButtonClicked(System.Object,System.EventArgs)">
            <summary>
            On action click, action the push and if an url is set, create
            a webbrowser task.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.OnExitButtonClicked(System.Object,System.EventArgs)">
            <summary>
            On exit click, exit the push and go back.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPage`2.NotifyPropertyChanged(System.String)">
            <summary>
            Notify changes on given property
            </summary>
            <param name="propertyName">Property's name</param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPage`2.ViewModel">
            <summary>
            ViewModel
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPage`2.EngagementAction">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPage`2.EngagementExit">
            <summary>
            Exit
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Engagement.EngagementReachPage`2.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementAnnouncementPage.CreateViewModel(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create an announcement view model for a given content
            </summary>
            <param name="content">Content</param>
            <returns>EngagementAnnouncementViewModel</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementAnnouncementPage.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Check if an id is set in the result string of the page. If so, capture it
            and create the content and view model from here.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementAnnouncementPage.OnActionButtonClicked(System.Object,System.EventArgs)">
            <summary>
            On action click, action the push. If an url is set, the SDK will create
            a webbrowser task to play it.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementAnnouncementViewModel">
            <summary>
            EngagementAnnouncementViewModel
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1">
            <summary>
            EngagementReachPageViewModel
            </summary>
            <typeparam name="Payload"></typeparam>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementReachViewModel">
            <summary>
            A basic class to handle the common event on a notification/announcement/poll.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachViewModel.Display">
            <summary>
            Indicate that the reach content has been displayed.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachViewModel.Action">
            <summary>
            Indicate that the reach content has been actioned.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachViewModel.Exit">
            <summary>
            Indicate that the reach content has been exited.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachViewModel.RaiseDisplayed(Microsoft.Azure.Engagement.EngagementReachFeedbackEventArgs)">
            <summary>
            Raise displayed event
            </summary>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachViewModel.RaiseActioned(Microsoft.Azure.Engagement.EngagementReachFeedbackEventArgs)">
            <summary>
            Raise actioned event
            </summary>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachViewModel.RaiseExited(Microsoft.Azure.Engagement.EngagementReachFeedbackEventArgs)">
            <summary>
            Raise exited event
            </summary>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.#ctor">
            <summary>
            Create an empty EngagementReachPageViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.#ctor(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create a EngagementReachPageViewModel
            </summary>
            <param name="content">EngagementReachContent to base the VM on</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.InitializeProperties(`0)">
            <summary>
            Initialize the properties of the VM
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.Subtitle">
            <summary>
            Subtitle
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.ActionLabel">
            <summary>
            Action label
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.ExitLabel">
            <summary>
            Exit label
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.HasTitle">
            <summary>
            Has a title
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.HasSubtitle">
            <summary>
            Has a subtitle
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.HasBody">
            <summary>
            Has a body
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.HasButtons">
            <summary>
            Has buttons
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.HasAction">
            <summary>
            Has action
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementReachPageViewModel`1.HasExit">
            <summary>
            Has exit
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementAnnouncementViewModel.#ctor">
            <summary>
            Create an empty EngagementAnnouncementViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementAnnouncementViewModel.#ctor(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create a EngagementAnnouncementViewModel with a given content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementAnnouncementViewModel.InitializeProperties(Microsoft.Azure.Engagement.EngagementReachAnnouncement)">
            <summary>
            Initialize the properties
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementAnnouncementViewModel.Url">
            <summary>
            Action url
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementAnnouncementViewModel.HasUrl">
            <summary>
            Has an URL
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementDefaultTextViewAnnouncementPage">
            <summary>
            Engagment default page for the TextView announcements
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementTextViewAnnouncementPage">
            <summary>
            Basic behavior for a Text View announcement
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultTextViewAnnouncementPage.#ctor">
            <summary>
            Create a EngagmentDefaultTextViewAnnouncementPage
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultTextViewAnnouncementPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementDefaultWebViewannouncementPage">
            <summary>
            Engagement default page for the WebView announcements
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementWebViewannouncementPage">
            <summary>
            Basic 
            for a Web view announcement
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementWebViewannouncementPage.SCRIPT">
            <summary>
            A script object which contains the engagementReachContent object to interface
            the web view and the inner html, abstracting the window.external.notify method.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementWebViewannouncementPage.InitializeViewModel">
            <summary>
            Initialize the ViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementWebViewannouncementPage.OnScriptNotified(System.Object,Microsoft.Phone.Controls.NotifyEventArgs)">
            <summary>
            Handle the result of a call to window.external.notify method in the 
            web browser.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultWebViewannouncementPage.#ctor">
            <summary>
            Create a EngagementDefaultWebViewannouncementPage
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultWebViewannouncementPage.OnScriptNotified(System.Object,Microsoft.Phone.Controls.NotifyEventArgs)">
            <summary>
            Handler when a script is called.
            Needed by the XAML
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultWebViewannouncementPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementBase64ImageConverter">
            <summary>
            Convert a Base64 image into a real usable image
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBase64ImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the Base64 string to an image
            </summary>
            <param name="value">Value</param>
            <param name="targetType">TargetType</param>
            <param name="parameter">Parameter</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBase64ImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back an image to a Base64 (not implemented).
            </summary>
            <param name="value">Value</param>
            <param name="targetType">TargetType</param>
            <param name="parameter">Parameter</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementVisibilityConverter">
            <summary>
            Visiblity converter
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean to a Visibility value
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a Visibility value to a boolean
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementUI">
            <summary>
            Some useful methods used by Engagement.Reach
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.Navigate(System.String)">
            <summary>
            Navigate to the given URI
            </summary>
            <param name="uri">Uri of the page</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.TryNavigateTo(System.String)">
            <summary>
            Navigate to the given URI in a web browser task if the url is valid
            </summary>
            <param name="uri">Uri of the page</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.ShowContent(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Show the content to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.IsLightTheme">
            <summary>
            Indicate if the current theme is the light theme.
            </summary>
            <returns>True if the current theme is the light theme, false otherwise (dark theme).</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.GetIconCloseUri(System.Boolean)">
            <summary>
            Get the uri of the close button, depending on the theme.
            </summary>
            <param name="inverse">Indicate if the icon must be inversed for the current theme.</param>
            <returns>The url of the icon.</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.DoActionOnUIThread(System.Action)">
            <summary>
            Do an action on the UI thread.
            This method is invoked on the UI thread if we are on a background one.
            Otherwise, it's called directly.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.ShowNotification(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create a notification for the current page.
            
            If an exception is catched during the creation, we throw it and let the
            caller handles it.
            </summary>
            <returns>The notification view</returns>
            <exception cref="T:System.Exception">If an error occurred during the execution</exception>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.CreateAndDisplayNotification(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create, add and display a notification.
            This method MUST be called on the UI thread.
            </summary>
            <param name="reachContent">Content</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.TryFindOrCreateEngagementGridRoot(Microsoft.Phone.Controls.PhoneApplicationPage,System.Windows.Controls.Grid@)">
            <summary>
            Find an eligible engagement root grid. If it does not exist, create a new one.
            </summary>
            <param name="page">The current phone application page</param>
            <param name="container">
            The existing grid of the same name or a new one.
            Will <b>ALWAYS</b> be set. Either by the existing grid, or a new one.
            </param>
            <returns>True if the grid already exist, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.RemoveNotification">
            <summary>
            Remove a Engagement notification from the current view.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.RemoveContent">
            <summary>
            Not used in WP because content are page, they are not a control in a page.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.WaitForUI(System.Action)">
            <summary>
            Poll the UI until a page is created.
            Then, invoke a callback with the navigation service and context
            </summary>
            <param name="callback">The result callback</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.IsValidUriForWebBrowserTask(System.String)">
            <summary>
            Indicate if a given url is valid for a webbrowser task.
            The url must not be null/whitespace and should be prefixed
            by the http or https protocol.
            </summary>
            <param name="uri">The uri to test</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.StartWebBrowserTask(System.String)">
            <summary>
            Start a web browser task for a given uri, if the uri is valid.
            </summary>
            <param name="uri">The uri to open</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementUI.RunOnUI(System.Action)">
            <summary>
            Run this action on the UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementPollPage">
            <summary>
            EngagementPollPage
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollPage.#ctor">
            <summary>
            Create a EngagementPollPage
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollPage.InitializeApplicationBar">
            <summary>
            Disable Action Button by default before displaying the view
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollPage.CreateViewModel(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create the view model with a given content
            </summary>
            <param name="content">Content</param>
            <returns>EngagementPollViewModel</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollPage.EnableActionButton">
            <summary>
            Enable action button in app bar
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementPollViewModel">
            <summary>
            EngagementPollViewModel
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementPollViewModel.mQuestions">
            <summary>
            List of questions
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementPollViewModel.mIsActionButtonEnabled">
            <summary>
            Notify the view to enable Action Button when it is set
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.#ctor">
            <summary>
            Create an empty EngagementPollViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.#ctor(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create a EngagementPollViewModel
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.InitializeProperties(Microsoft.Azure.Engagement.EngagementReachPoll)">
            <summary>
            Initialize the properties
            </summary>
            <param name="payload">Payload</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.GetResults">
            <summary>
            Get the answers for each question.
            The string is json-formatted.
            
            Example :
            
            {
              1: 2,
              2: 6,
              questionId: answerId,
              [...]
            }
            </summary>
            <returns>A json string</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.Action">
            <summary>
            When actioning the view, send the results as the body.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.IsEveryQuestionChecked">
            <summary>
            Check that each question has been checked
            </summary>
            <returns>Whether all questions have been answered or not</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPollViewModel.CanEnableActionButton">
            <summary>
            Request Action button to be enabled if every questions have been checked 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementPollViewModel.Questions">
            <summary>
            Questions
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementPollViewModel.IsActionButtonEnabled">
            <summary>
            Notify the view to enable Action Button when it is set
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementDefaultPollPage">
            <summary>
            Engagement default page for the polls
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultPollPage.#ctor">
            <summary>
            Create a EngagementDefaultPollPage
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultPollPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementBasicNotificationView">
            <summary>
            Sample notification for the EngagementReach SDK.
            Base your implementation on this class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementNotificationView">
            <summary>
            Notification view base class and main logic
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationView.InitializeViewModel(Microsoft.Azure.Engagement.EngagementNotificationViewModel)">
            <summary>
            Initialize the view model
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationView.Action(System.Object,System.EventArgs)">
            <summary>
            Action the notification.
            Remove it from its parent, and send the feedback.
            If the notification has an url, open a browser.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationView.Exit(System.Object,System.EventArgs)">
            <summary>
            Exit the notification.
            Remove it from its parent, and send the feedback.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationView.Remove">
            <summary>
            Remove the component from its parent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationView.OnActioned(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            On action handler for a gesture event.
            Set the event as handled, and call the Action() method.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationView.OnExited(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            On exit handler for a gesture event.
            Set the event as handled, and call the Exit() method.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationView.ViewModel">
            <summary>
            The ViewModel of the notification.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.#ctor(Microsoft.Azure.Engagement.EngagementNotificationViewModel)">
            <summary>
            Create a EngagementBasicNotificationView
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.OnActioned(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            OnAction handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.OnExited(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            OnExit handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.OnImageOnlySizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Change the stretching of the EngagementNotificationImageOnly component depending on its size and the size of its container.
            </summary>
            <param name="sender">The notification only image.</param>
            <param name="e">Size changed event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.OnImageSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Change the stretching of the EngagementNotificationImage component depending on its size and the size of its container.
            </summary>
            <param name="sender">The notification image.</param>
            <param name="e">Size changed event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.OnGlobalSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Update the layout with new sizes.
            </summary>
            <param name="sender">The Engagement's notiication main grid</param>
            <param name="e">Size changed event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBasicNotificationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementDefaultNotificationView">
            <summary>
            EngagementDefaultNotificationView
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.SwivelInStoryboard">
            <summary>
            Swivel animation when displaying the notification
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.SwivelOutStoryboard">
            <summary>
            Swivel animation when closing the notification
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.#ctor(Microsoft.Azure.Engagement.EngagementNotificationViewModel)">
            <summary>
            Create a EngagementDefaultNotificationView
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.MoveTo(System.Windows.Media.TranslateTransform,System.Double,System.Double,System.EventHandler)">
            <summary>
            Animate a move on a transform object to a new position, with a power ease easing function.
            </summary>
            <param name="transform">The transform object to move</param>
            <param name="from">The prior position</param>
            <param name="to">The new position</param>
            <param name="handlerOnCompleted">On complete event handler</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.GetThreshold">
            <summary>
            Get the threshold value for the container, where it is considered "out".
            </summary>
            <returns>The size of the first part</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnActioned(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Complete override of the default OnActioned handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnExited(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Complete override of the default OnExited handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnMove(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Respond to a ManipulationDelta event.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnMoveEnded(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Respond to a ManipulationCompleted event.
            </summary>
            <param name="send">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnImageOnlySizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Change the stretching of the EngagementNotificationImageOnly component depending on its size and the size of its container.
            </summary>
            <param name="sender">The notification only image.</param>
            <param name="e">Size changed event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnImageSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Change the stretching of the EngagementNotificationImage component depending on its size and the size of its container.
            </summary>
            <param name="sender">The notification image.</param>
            <param name="e">Size changed event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.OnGlobalSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Update the layout with new sizes.
            </summary>
            <param name="sender">The Engagement's notification main grid</param>
            <param name="e">Size changed event arguments.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementDefaultNotificationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementNotificationViewModel">
            <summary>
            EngagementNotificationViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationViewModel.#ctor">
            <summary>
            Create an empty EngagementNotificationViewModel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotificationViewModel.#ctor(Microsoft.Azure.Engagement.EngagementReachContent)">
            <summary>
            Create a CappptainNotificationViewModel with a given content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.ImageMargin">
            <summary>
            ImageMargin (depends on the icon)
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasText">
            <summary>
            Has text
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasNoText">
            <summary>
            Has no text
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasTitle">
            <summary>
            Has title
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasMessage">
            <summary>
            Has a message
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasImage">
            <summary>
            Has an image
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasIcon">
            <summary>
            Has an icon
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasClose">
            <summary>
            Has a close button
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.HasUrl">
            <summary>
            Has an action url
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementNotificationViewModel.CloseButtonUri">
            <summary>
            Uri for the close button image
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementBrowserHelper">
            <summary>
            EngagementBrowserHelper for the WebBrowser component
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementBrowserHelper.HtmlProperty">
            <summary>
            Html property for the xaml component.
            Add the binding for the html content.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBrowserHelper.GetHtml(Microsoft.Phone.Controls.WebBrowser)">
            <summary>
            Getter
            </summary>
            <param name="browser"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBrowserHelper.SetHtml(Microsoft.Phone.Controls.WebBrowser,System.String)">
            <summary>
            Setter
            </summary>
            <param name="browser"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementBrowserHelper.OnHtmlChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Registered callback
            </summary>
            <param name="dependencyObject">Object with the dependecy property</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementPageHeader">
            <summary>
            EngagementPageHeader
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPageHeader.#ctor">
            <summary>
            Create a EngagementPageHeader
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPageHeader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.Channel">
            <summary>
            The Channel object is the link between MPNS and the SDK.
            It establishes the channel, set the uri and the toast.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Channel.#ctor">
            <summary>
            Create a wrapper around the HttpNotificationChannel.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Channel.Bind">
            <summary>
            Initialize the HttpNotificationChannel.
            Find the channel, create it if needed and attach handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Channel.Unbind">
            <summary>
            Unbind the channel
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Channel.AttachHandlers">
            <summary>
            Attach handlers for the http notification channel.
            * Channel Uri updated
            * Error occurred
            * Shell toast received
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Channel.DetachHandlers">
            <summary>
            Detach handlers for the http notification channel.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.WindowsPhoneReachFactory.CreateEngagementUI">
            <summary>
            Create a engagement UI instance to interract with user interface.
            </summary>
            <returns>
            Instance of the engagement UI.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.WindowsPhoneReachFactory.CreatePushChannel">
            <summary>
            Create a push channel instance to manage platform channel.
            </summary>
            <returns>
            Instance of a push Channel.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.WindowsPhoneReachFactory.CreateStateMachine(Microsoft.Azure.Engagement.MessageSpool,Microsoft.Azure.Engagement.CommandWorker)">
            <summary>
            Create an state machine to manage interacive content.
            </summary>
            <returns>
            Instance of an interactive content state machine.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.WindowsPhoneReachFactory.CreateApplicationLifecycleManager">
            <summary>
            Return a unique instance of an application lifecycle manager.
            </summary>
            <returns>
            Unique instance of an application lifecycle manager
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.WindowsPhoneReachFactory.RunOnUI(System.Action)">
            <summary>
            Run an action on the UI thread.
            </summary>
            <param name="action">The action to be run on the UI thread.</param>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>roB8AOCdom35Hu9LRtGqMuPNYsY=</DigestValue></Reference></SignedInfo><SignatureValue>
    faSIatjr9MC6eYACfJP0c3fN7vCgcK9Kfy2LoNrZjQV5oZVvZh+5hEfIIeyl/znlE1pXEAkL
    Y2HtVfcB/9v6urrv72dxq8d6tVgT+T085qBNGsSGPJGvJZagzV7zphtwFqhk7nw6wuYp0m8r
    CTEX4hf+aX7CMtHshX85RfyK4VLpGk4JmS5y24PcgZW8o+3hgqSu8M3L3MfCJTJ1JHYrKZAq
    pdJJXDkYuWbuorRNy6yzohllduRw3JPC37eFJyFtMq4wJKG1RxeEbdS8tpR8g8Cf8rIYaweM
    szAUzCrSvhdSojfZ0FLuTrvqU5a7h4GeruSlAwxZYJHyiGtUXQF0dA==
  </SignatureValue><KeyInfo>
      <KeyValue>
        <RSAKeyValue>
          <Modulus>
            lnFd7QZG+oTLnVu3Rsew4bQROQOtsRVzYJzrp7ZuGjw//2XjNPGmpSFeVplsWOSSoQpcwtPc
            Ui8MZZogYUBTMZxsjyF9uvn+E1BSYJU6W7lYpXRhQamU4K0mTkyhl3BJJ158Z8pPHnGERrwd
            S7biD8XGJ8kH5noKpRcAGUxwRTgtgbRQqsVn0fp5vMXMoXKb9CU0mPhU3xI5OBIvpGulmn7H
            YtHcz+09NPi53zUwuux5MqnhqaxVTUx/TFbDEwt28Qf5zEes+4jVUqUeKPo9Lc/PhJiGcWUR
            z4XJCUSG4W/nsfysQESlqYsjP4JJndWWWVATWRhz/0MMrSvUfzBAZw==
          </Modulus>
          <Exponent>AQAB</Exponent>
        </RSAKeyValue>
      </KeyValue>
      <X509Data>
        <X509Certificate>
          MIIE7DCCA9SgAwIBAgITMwAAAMps1TISNcThVQABAAAAyjANBgkqhkiG9w0BAQUFADB5MQsw
          CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
          A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBT
          aWduaW5nIFBDQTAeFw0xNDA0MjIxNzM5MDBaFw0xNTA3MjIxNzM5MDBaMIGDMQswCQYDVQQG
          EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
          TWljcm9zb2Z0IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYDVQQDExVNaWNyb3Nv
          ZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCWcV3tBkb6
          hMudW7dGx7DhtBE5A62xFXNgnOuntm4aPD//ZeM08aalIV5WmWxY5JKhClzC09xSLwxlmiBh
          QFMxnGyPIX26+f4TUFJglTpbuVildGFBqZTgrSZOTKGXcEknXnxnyk8ecYRGvB1LtuIPxcYn
          yQfmegqlFwAZTHBFOC2BtFCqxWfR+nm8xcyhcpv0JTSY+FTfEjk4Ei+ka6Wafsdi0dzP7T00
          +LnfNTC67HkyqeGprFVNTH9MVsMTC3bxB/nMR6z7iNVSpR4o+j0tz8+EmIZxZRHPhckJRIbh
          b+ex/KxARKWpiyM/gkmd1ZZZUBNZGHP/QwytK9R/MEBnAgMBAAGjggFgMIIBXDATBgNVHSUE
          DDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUH17iXVCNVoa+SjzPBOinh7XLv4MwUQYDVR0RBEow
          SKRGMEQxDTALBgNVBAsTBE1PUFIxMzAxBgNVBAUTKjMxNTk1K2I0MjE4ZjEzLTZmY2EtNDkw
          Zi05YzQ3LTNmYzU1N2RmYzQ0MDAfBgNVHSMEGDAWgBTLEejK0rQWWAHJNy4zFha5TJoKHzBW
          BgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
          dWN0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsG
          AQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY0NvZFNpZ1BD
          QV8wOC0zMS0yMDEwLmNydDANBgkqhkiG9w0BAQUFAAOCAQEAd1zr15E9zb17g9mFqbBDnXN8
          F8kP7Tbbx7UsG177VAU6g3FAgQmit3EmXtZ9tmw7yapfXQMYKh0nfgfpxWUftc8Nt1THKDha
          iOd7wRm2VjK64szLk9uvbg9dRPXUsO8b1U7Brw7vIJvy4f4nXejF/2H2GdIoCiKd381wgp4Y
          ctgjzHosQ+7/6sDg5h2qnpczAFJvB7jTiGzepAY1p8JThmURdwmPNVm52IaoAP74MX0s9IwF
          ncDB1XdybOlNWSaD8cKyiFeTNQB8UCu8Wfz+HCk4gtPeUpdFKRhOlludul8bo/EnUOoHleht
          NA04V9w3KDWVOjic1O1qhV0OIhFeew==
        </X509Certificate>
      </X509Data>
      <X509Data>
        <X509Certificate>
          MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYK
          CZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRN
          aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcN
          MjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJ
          bWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
          dHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWE
          zbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0
          ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/k
          XG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF
          1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjn
          rOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e
          1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTN
          Az93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ
          34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAH
          Muouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yq
          hv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
          FgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEF
          BQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXx
          BLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/k
          bQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3s
          u77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcr
          SwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZ
          EjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr
          8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21ad
          laBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1
          h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99
          ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da
        </X509Certificate>
      </X509Data>
      <X509Data>
        <X509Certificate>
          MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPy
          LGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3Nv
          ZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMx
          MjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
          UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNy
          b3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
          ALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1
          VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJca
          p6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKN
          Yv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3n
          rAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFa
          MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1Ud
          DwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGY
          YDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJg
          QFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29m
          dC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUH
          AQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRz
          L01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEy
          tWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3
          PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa
          8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5
          Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU
          8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18
          KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUe
          DordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z5
          2Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZo
          gwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/
          aZuW4hCoELQ3UAjWwz0=
        </X509Certificate>
      </X509Data>
    </KeyInfo><Object id="ts-countersig"><X509Data><X509Certificate>MIIEuzCCA6OgAwIBAgITMwAAAFwJq3ADEfxcFQAAAAAAXDANBgkqhkiG9w0BAQUFADB3MQswCQYD
VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
TWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Ew
HhcNMTQwNTIzMTcxMzE2WhcNMTUwODIzMTcxMzE2WjCBqzELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AldBMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDTAL
BgNVBAsTBE1PUFIxJzAlBgNVBAsTHm5DaXBoZXIgRFNFIEVTTjpCQkVDLTMwQ0EtMkRCRTElMCMG
A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEP
ADCCAQoCggEBANYJa/7h+ToIHrYOs0PLI95ObOJZcc75TxmjL8QLy/H1Xyl5ielMpmU8xUtMXQHp
/i9QvCCDC5hHW5nqTZ/eqcsjlYzk07XcemMgs/L/r8dp/5K7jQpF7punPfdkmj6O6rRaABbNqeXV
TJUmQH8DmFyk6dBH1jblvqVRQb9b9uyuNN9K8gXa/fw9YY6yEa11unZrY2JOJSHPpz88ub9uBEMk
HrvplbnGydEgydhVI1Xnsr+vLVxathcwcTMQJH5xnrFl4ma2BdMyV0nEYhPYkoyBkY8zQ5EZbBL0
eRTm5Z/F5anhM0C22y9X05U2It3yQqmUtGTTgSMUlMPZRhdm3r0CAwEAAaOCAQkwggEFMB0GA1Ud
DgQWBBR/kUhDg4fJeBzpVcW521b4F9FHBDAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7syuwwzWz
DzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
dWN0cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsGAQUFBwEBBEwwSjBIBggrBgEFBQcw
AoY8aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRUaW1lU3RhbXBQ
Q0EuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQCCCVb4b+5GzEwp
9r7Tx2pf+V2EABkXgYloZBU/wUQ2OxhtBMusE7eOlOMt66P0QnxE0QnsWr7nk9OEcuKP1R3VOVP7
ciILZpI7ysqr+s/MZE7GRGyv4IOOFBG4sJBJn8OmlM+D4BFiWqtYo7hhlyR2rG1D947qHfOI/ipL
7h/0HW2sIEyIAEAutLlI2tHEbsGt9DOFYQuJLF5rygNjUkox7r1VwxCnUaiSrxJgxZxdRmPTzOqf
NcatCSB0hTUbRRKzllHhye2bgOV25fdWhesgnCiRVPtoulaFg1Vh/4hAXLENJgejxVfsFXkPlvSO
dqGKZ1qNf05i9H7fEKDWFLqX</X509Certificate></X509Data><X509Data><X509Certificate>MIIGBzCCA++gAwIBAgIKYRZoNAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQB
GRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9v
dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1MzA5WhcNMjEwNDAzMTMwMzA5WjB3
MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFt
cCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZ
USNQrc7dGE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr6Hu97IkHD/cOBJjwicwfyzMk
h53y9GccLPx754gd6udOo6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDlKEYuJ6yGT1VS
DOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd++NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSn
EUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68eeEExd8yb3zuDk6FhArUdDbH895uyAc4i
S1T/+QXDwiALAgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQjNPjZUkZw
Cu1A+3b7syuwwzWzDzALBgNVHQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1UdIwSBkDCB
jYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6RhMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJ
kiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
IEF1dGhvcml0eYIQea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3Js
Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYI
KwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2Nl
cnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0B
AQUFAAOCAgEAEJeKw1wDRDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxtYrhXAstOIBNQ
md16QOJXu69YmhzhHQGGrLt48ovQ7DsB7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mR
KiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVRDupiXD8WmIsgP+IHGjL5zDFKdjE9K3IL
yOpwPf+FChPfwgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4ZVxbARcKFA7S2hSY9Ty5
ZlizLS/n+YWGzFFW6J1wlGysOUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89Ds+X57H21
46SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BNZ8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RI
zCzU2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LBJ1S2sWo9iaF2YbRuoROmv6pH8BJv
/YoybLL+31HIjCPJZr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCleKuzoJZ1GtmShxN1
Ii8yqAhuoFuMJb+g74TKIdbrHk/Jmu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6L54/
LlUWa8kTo/0=</X509Certificate></X509Data><CounterSignature xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003" ts-format="cms-timestamp-message">MIIGyQYJKoZIhvcNAQcCoIIGujCCBrYCAQMxCzAJBgUrDgMCGgUAMIIBEwYJKoZIhvcNAQcBoIIB
BASCAQB9pIhq2Ov0wLp5gAJ8k/Rzd83u8KBwr0p/LYug2tmNBXmhlW9mH7mER8gh7KX/OeUTWlcQ
CQtjYe1V9wH/2/q6uu/vZ3Grx3q1WBP5PTzmoE0axIY8ka8llqDNXvOmG3AWqGTufDrC5inSbysJ
MRfiF/5pfsIy0eyFfzlF/IrhUukaTgmZLnLbg9yBlbyj7eGCpK7wzcvcx8IlMnUkdispkCql0klc
ORi5Zu6itE3LrLOiGWV25HDck8Lft4UnIW0yrjAkobVHF4Rt1Ly2lHyDwJ/yshhrB4yzMBTMKtK+
F1KiN9nQUu5Ou+pTlruHgZ6u5KUDDFlgkfKIa1RdAXR0oIIDcqGCA24wggJWAgEBMIHboYGxpIGu
MIGrMQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjENMAsGA1UECxMETU9QUjEnMCUGA1UECxMebkNpcGhlciBE
U0UgRVNOOkJCRUMtMzBDQS0yREJFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2
aWNloiUKAQEwCQYFKw4DAhoFAAMVAMzPJzSA2L82tIXhvLtB9rgR4suooIHCMIG/pIG8MIG5MQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMScwJQYDVQQLEx5uQ2lwaGVy
IE5UUyBFU046NTdGNi1DMUUwLTU1NEMxKzApBgNVBAMTIk1pY3Jvc29mdCBUaW1lIFNvdXJjZSBN
YXN0ZXIgQ2xvY2swDQYJKoZIhvcNAQEFBQACBQDYjKFKMCIYDzIwMTUwMjE2MTcwMzA2WhgPMjAx
NTAyMTcxNzAzMDZaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIFANiMoUoCAQAwBwIBAAICGxQwBwIB
AAICGCwwCgIFANiN8soCAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAaAKMAgCAQAC
AxbjYKEKMAgCAQACAwehIDANBgkqhkiG9w0BAQUFAAOCAQEAQD0GO8+og6jiNX/gWgA/OAgOGHks
fwZOoX3oW/fDYeNGHfHmt2NzXij66OzL3M0Z2sIZJEU5sXj8kKoDx5hMRbAgvkWawDU41d2mL30Y
0Tp5s8tskz7/P8whgweU+GlI4eEHY7Mm+IUmlZNlT+/hluOnG0UUNPHqRVYqjrs2RRvBnES+RShJ
Os4Rkc3Xa/t+SaXUjVBhoz6STHbwvCaiulqHr7/nU4exMgI83f7ijxIuLFrpFbsFUB1vynBamfm5
EoTS2DhB2iNu/hpmVMTRLJ1K4I4H+/NqMxMl9R+/AAaQRBnbGTAszheeMgX2RQT3ezwnlES9H2M1
04Yr3GtzXDGCAhUwggIRAgEBMIGOMHcxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xITAfBgNV
BAMTGE1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQQITMwAAAFwJq3ADEfxcFQAAAAAAXDAJBgUrDgMC
GgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTUwMjE3MDMz
MzMyWjAjBgkqhkiG9w0BCQQxFgQUwVHcCqtxUyCPWCGrSODvXouyfJwwDQYJKoZIhvcNAQEFBQAE
ggEAJlug5yMGzPrOEN0fKgWTO3ITpwZ7HHCsH8D/DOml3ku4XH9ygfLl5kZSkpYGY8gyng4WmQ3I
TMGE8+mH0/dax4IbzeoGzn7Bm01D+xCoqKDIRiGzYP7D9uOEXt/F3CakZpOLzVTQqRDaKmMCwLjO
oIWUiPUWad9exvQmZmO6MId5PEikvnCBGALaXCA+4ah4iFLxTPVtnNfV2bvZ+FJ8rsUPbw17rgeP
EClLpPvI6j8fWXf26T9u+YDTv6Zd0MmhB1sNRlr0uaiCqkgkmoyfekt5jvOxstK4psaaaldUwScT
vwrYiehv8a4rwaH90aatQyg+98/DFVKQI5h5b5VSJw==</CounterSignature></Object></Signature></doc>