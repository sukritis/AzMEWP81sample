<?xml version="1.0"?><doc>
    <assembly>
        <name>Microsoft.Azure.Engagement.EngagementAgent.Portable</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.Engagement.EngagementPortableAgent">
            <summary>
            You do not have to use this Engagement Agent module directly. You have to use the EngagementAgent class instead.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementPortableAgent.sInstance">
            <summary>
            Unique instance of the Engagement agent.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementPortableAgent.mService">
            <summary>
            Service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementPortableAgent.mCommandWorker">
            <summary>
            Thread safe command spool.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.PortableInit(System.Threading.Tasks.Task)">
            <summary>
            Portable init part of the Engagement Agent module.
            You should call this method right after the agent platform specific initialisation.
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.Terminate">
            <summary>
            Manually terminate the Engagement Agent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.StartActivity(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Notify the start of a new activity within the current session. A session being a sequence of
            activities, this call sets the current activity within the current session. If there is no
            current session, this call starts a new session.
            </summary>
            <param name="name">
            The name of the current activity for the current session, can be null for
            default name (but cannot be empty). Name is limited to 64 characters.
            </param>
            <param name="extras">
            The extra details associated with the activity. Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
            <see cref="M:Microsoft.Azure.Engagement.EngagementPortableAgent.EndActivity"/>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.EndActivity">
            <summary>
            Report that the current activity ended. This will close the session.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.StartJob(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Notify the start of a new job.
            </summary>
            <param name="name">
            Unique job name, two jobs with the same name can't run at the same time, if a job
            is started twice, the second version of the job will replace the first one.
            Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this job (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
            <see cref="M:Microsoft.Azure.Engagement.EngagementPortableAgent.EndJob(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.EndJob(System.String)">
            <summary>
            Notify the end of a job. This has no effect if no job is running for the specified name.
            </summary>
            <param name="name">The name of a job that has been started with "StartJob(string, Dictionnary)"</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendEvent(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an event unrelated to any session or job.
            </summary>
            <param name="name">
            Name event name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this event (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, th e encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendSessionEvent(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an event related to the current session. This has no effect if the session has not been started.
            </summary>
            <param name="name">
            Event name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this event (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendJobEvent(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an event related to a running job. This has no effect if no job is running for the specified name.
            </summary>
            <param name="eventName">
            Event name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="jobName">job name</param>
            <param name="extras">
            The extra details associated with this event (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendError(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an error unrelated to any session or job.
            </summary>
            <param name="name">
            Error name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this error (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendSessionError(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an error related to the current session. This has no effect if the session has not been started.
            </summary>
            <param name="name">
            Error name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="extras">
            The extra details associated with this error (can be null) Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendJobError(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send an error related to a running job. This has no effect if no job is running for the specified name.
            </summary>
            <param name="errorName">
            Error name/tag. Name is limited to 64 characters and cannot be empty.
            </param>
            <param name="jobName">Job name.</param>
            <param name="extras">
            The extra details associated with this error (can be null). Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendAppInfo(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Send application specific informations.
            </summary>
            <param name="appInfos">
            Application information as a Dictionary. Keys must match the
            ^[a-zA-Z][a-zA-Z_0-9]* regular expression. Extras are encoded into JSON
            before being sent to the server, the encoded limit is 1024 characters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendCrash(System.Exception,System.String,System.Boolean)">
            <summary>
            Send a crash.
            </summary>
            <param name="e">The exception</param>
            <param name="stackTrace">The stack Trace</param>
            <param name="terminateSession">
            Determine if the Engagement session will be terminated or not. 
            True if you to terminate the session with crash, false otherwise.
            Default to false.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendLocation(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the location of the user.
            Each argument is optional.
            Private currently.
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
            <param name="countrycode">User's country code (iso 3166)</param>
            <param name="region">User's region</param>
            <param name="locality">User's locality</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SendReachFeedback(System.String,System.String,System.Int32,System.String)">
            <summary>
            Send a reach feedback to the logger.
            </summary>
            <param name="status">The status, ie. displayed/actioned/exited, etc.</param>
            <param name="kind">The kind, ie. announcement/poll/etc.</param>
            <param name="contentId">The id of the reach message</param>
            <param name="body">Feedback of the body</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.GetDeviceId">
            <summary>
            Get the device identifier.
            </summary>
            <returns>Id</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.SetBurstThreshold(System.Int32)">
            <summary>
            Set the delay between each request to the engagement back-end.
            By default, the value is 0, which means that the requests are sent in real-time.
            If you provide a value greather than 0, the logs will be bundled and send at
            the given value interval.
            The value must be higher than 1000ms in order to be effective. Otherwise, the
            burst threshold will be reset to real-time (0).
            
            If you want to reset the burst threshold, simply pass 0 to the method.
            </summary>
            <param name="threshold">Interval</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.#ctor(Microsoft.Azure.Engagement.AgentFactory)">
            <summary>
            protected constructor to prevent instanciation outside child.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.ReStartCommandWorker">
            <summary>
            Start the command worker.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.StopLogWorker">
            <summary>
            Stop the HTTP log worker, it is still possible to stack logs but they won't be sent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementPortableAgent.StartLogWorker">
            <summary>
            Start the HTTP log worker, pending logs will be sent.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementPortableAgent.Instance">
            <summary>
            Get or Set the Engagement Configuration instance, setting up this instance must only be done on EngagementPortableAgent.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementConfiguration">
            <summary>
            This class gathers every Engagement settings required by Engagement SDK. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.ENGAGEMENT_RESOURCES">
            <summary>
            The engagement resource filename.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.sInstance">
            <summary>
            The unique instance of Engagement configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.mAgentConfiguration">
            <summary>
            The Engagement agent configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.mReachConfiguration">
            <summary>
            The Engagement agent configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementConfiguration.#ctor">
            <summary>
            Default EngagementConfiguration constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.Agent">
            <summary>
            Customize Agent settings.
            </summary>
            <value>
            The Engagement's SDK key.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.Reach">
            <summary>
            Customize Agent settings.
            </summary>
            <value>
            The Engagement's SDK key.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.Instance">
            <summary>
            Get or Set the Engagement Configuration instance, setting up this instance must only be done on EngagementPortableAgent.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration">
            <summary>
            This class gathers agent settings required by Engagement agnent SDK. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.ENDPOINT">
            <summary>
            Endpoint value string
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.APPID">
            <summary>
            AppId value string
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.SDKKEY">
            <summary>
            SdkKey value string
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.mConnectionString">
            <summary>
            Raw connection string.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.mEndPoint">
            <summary>
            Endpoint
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.mAppId">
            <summary>
            Application identifier within endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.mSdkKey">
            <summary>
            SDK key.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.#ctor">
            <summary>
            Agent configuration instanciation must not be used outside Engagement configuration class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.ParseConnectionString(System.String)">
            <summary>
            Set EngagementConfiguration attributs (SDK key, application ID and stamp domain)
            </summary>
            <param name="value">The Engagement's connection string.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.FoundString(System.String)">
            <summary>
            Use to found items on connection string.
            </summary>
            <param name="value">value to be found in connection string.</param>
            <returns>return the string extract from connection that match parameter</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.ConnectionString">
            <summary>
            Gets or sets the Engagement's connection string for this application.
            </summary>
            <value>
            The Engagement's connection string.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.AppId">
            <summary>
            Gets or sets the Engagement's application ID for this application.
            </summary>
            <value>
            The Engagement's application identifier.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.SDKKey">
            <summary>
            Gets or sets the Engagement's SDK key for this application.
            </summary>
            <value>
            The Engagement's SDK key.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.EndPoint">
            <summary>
            Gets or sets the Engagement's domaine for this application.
            </summary>
            <value>
            The Engagement's domaine.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.ReportCrash">
            <summary>
            True if engagement must report crash, false otherwise. Default to true
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.AgentConfiguration.ReportLocation">
            <summary>
            True if engagement must report the location automatically, false otherwise. Default to false
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementConfiguration.ReachConfiguration">
            <summary>
            This class gathers agent settings required by Engagement agnent SDK. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementConfiguration.ReachConfiguration.#ctor">
            <summary>
            Reach configuration instanciation must not be used outside Engagement configuration class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.ReachConfiguration.EnableNativePush">
            <summary>
            Optional configuration. Indicate whether the native push is activated or not.
            </summary>
            <value>
              <c>true</c> if native push is enable otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementConfiguration.ReachConfiguration.ChannelName">
            <summary>
            Optional configuration. Name of the push channel. Provide the same that your application may currently use.
            </summary>
            <value>
            The name of the channel.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementService">
            <summary>
            Engagement service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.REGEX_KEY_FORMAT">
            <summary>
            Extras and appInfos keys must enforce a certain format.
            Use this regex format to test this.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.TYPE_EVENT">
            <summary>
            Event log name
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.TYPE_ERROR">
            <summary>
            Error log name
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mDeviceStatus">
            <summary>
            Device status.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mNetworkStatus">
            <summary>
            Network status.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mLocationService">
            <summary>
            Location service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mHttpLogService">
            <summary>
            Http service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mCommandWorker">
            <summary>
            Worker to execute agent command.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mAppLifecycle">
            <summary>
            Application life cycle manager
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mLogBuilder">
            <summary>
            Log builder facility.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mCurrentJobs">
            <summary>
            List of running jobs.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementService.mPendingLocationIpLog">
            <summary>
            When the sdk is initialized, it contacts the /ip-to-country API.
            However, we receiving the result of the API, we do not 
            the new
            location log instantly. We wait for a log that needs it.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.#ctor(Microsoft.Azure.Engagement.CommandWorker)">
            <summary>
            Create a engagement service.
            </summary>
            <param name="commandWorker">The worker which executes agent commands.</param>
            <exception cref="T:Microsoft.Azure.Engagement.EngagementIncorrectConfigurationException">Impossible to retrieve the device id. Check your app permission.</exception>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.StartActivity(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Start an activity.
            If there is no existing session, start a new one before the activity.
            Do nothing if the activity has already been started.
            </summary>
            <param name="name">Name</param>
            <param name="extras">Extras</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.EndActivity">
            <summary>
            End the activity and the session, except if a new activity is started during a 1s interval.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.EndSession">
            <summary>
            Reset all the flags.
            Create a endSession log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.StartJob(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Start a job. Store it until it is stopped.
            </summary>
            <param name="name"></param>
            <param name="extras"></param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.SendReachFeedback(System.String,System.String,System.String,System.String)">
            <summary>
            Send a reach feedback to the logger.
            </summary>
            <param name="status">The status, ie. displayed/actioned/exited, etc.</param>
            <param name="kind">The kind, ie. announcement/poll/etc.</param>
            <param name="contentId">The id of the reach message</param>
            <param name="body">Body of the reach message</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.Windows81CrashFormater(System.String,System.String)">
            <summary>
            Windows 8.1 specific format for crash log
            </summary>
            <param name="stackTrace">Original stacktrace</param>
            <param name="data">Data to send to engagement</param>
            <returns>Formated data</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.GetInitialMethodInException(System.Exception)">
            <summary>
            Get the method that causes the exception.
            
            Eg.:
            
            System.NullReferenceException: You have reached the border of the galaxy
              at MetroPuppet.Views.PuppetView2.Button_Tap_1(Object sender, GestureEventArgs e)
              at MS.Internal.CoreInvokeHandler.InvokeEventHandler(Int32 typeIndex, Delegate handlerDelegate, Object sender, Object args)
              at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, Int32 actualArgsTypeIndex, String eventName)
              
            Returns :
            
            $ -&gt; "MetroPuppet.Views.PuppetView2.Button_Tap_1(Object sender, GestureEventArgs e)"
            </summary>
            <param name="e">Exception</param>
            <returns>Initial method</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.Windows81CrashIDFormater(System.Exception,System.String,System.String)">
            <summary>
            Windows 8.1 specific format for crash log ID
            </summary>
            <param name="e">Original execption</param>
            <param name="end">Substring attribut for format</param>
            <param name="method">Original method formated</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.SendLocation(System.Xml.Linq.XElement)">
            <summary>
            Send a location.
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.SendLocation(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method is currently not exposed to the end-user (through the engagement agent).
            Send the given location to Engagement.
            Each argument is optional (use named parameter to select the ones you need).
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
            <param name="countrycode">Country code</param>
            <param name="region">Region</param>
            <param name="locality">Locality</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.InitLocationIp">
            <summary>
            Retrieve the current location from the IP.
            Asynchronous method.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.InitLocationTracking">
            <summary>
            Init the location tracking.
            Asynchronous method.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.UpdateLocation">
            <summary>
            Update and send the location.
            Asynchrounous method.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.Terminate(Microsoft.Azure.Engagement.EngagementLog)">
            <summary>
            Stop the service.
            Send the last logs (endSession, endJob, an eventual crash).
            </summary>
            <param name="crash">
            An eventual crash that started the termination. Could be null.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.CheckName(System.String,System.String,System.Boolean)">
            <summary>
            Check if a name is valid.
            Test if it is not null.
            Then, if the length is not 0 (after having been trimmed).
            Then, if the length does not exceed the fixed MAX_NAME_SIZE constant.
            </summary>
            <param name="name">Name to test.</param>
            <param name="caller">Caller method.</param>
            <param name="required">If the name is required (the validation is not strict).</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.CheckExtras(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String)">
            <summary>
            Check if the keys of a dictionary (in string form) are valids.
            Throw an ArgumentException if a key is not valid.
            </summary>
            <param name="data">Data to inspect</param>
            <param name="caller">Caller method.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.CheckDictionariesStrictEquality(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Compare two dictionaries for strict equality.
            </summary>
            <param name="a">The first dictionary</param>
            <param name="b">The second dictionary</param>
            <returns>True if strictly equal. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.StopLogWorker">
            <summary>
            Stop the HTTP log worker, it is still possible to stack logs but they won't be sent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.StartLogWorker">
            <summary>
            Start the HTTP log worker, pending logs will be sent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.OnSuspended">
            <summary>
            On suspended.
            Terminate the service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.OnVisibilityHide">
            <summary>
            Action to perform when the application just went background.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.OnVisibilityShow">
            <summary>
            Action to perform when the application just went foreground.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.OnCrashed(System.Exception)">
            <summary>
            On crashed handler.
            Send the crash and close the session.
            </summary>
            <param name="crash">Exception</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementService.OnLocIdRead(System.Object,Microsoft.Azure.Engagement.EventArgs{System.String})">
            <summary>
            When the application is started, we call the /ip-to-country API
            to get the current location country code.
            However, we do not send the log directly, but when we need it.
            This is why we listen to the LocIdRead event from the logBuilder to
            know when the loc id is accessed.
            
            When it's the case, we check if the locationIp log exists, and if the locId
            is not already set, we send it.
            Anyways, we reset the pending location IP log whatever it has been send or not.
            </summary>
            <param name="sender">Sender object</param>
            <param name="args">EventArgs containing the loc id</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.IApplicationLifecycleManager">
            <summary>
            Application life cycle management, ie:
            - Device status (to recover after a suspending state)
            - Device handlers (crash, closed, suspended)
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SetOnSuspendEventHandler(System.Action)">
            <summary>
            Set the suspended handler.
            </summary>
            <param name="onSuspended">
            Callback when the app has been suspended.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SetOnVisibilityEventHandler(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set the visibility hide handler to improve data manipulation and send onVisibilityShow action
            </summary>
            <param name="onVisibilityHide">Action use to match user manipulation</param>
            <param name="onVisibilityShow">Action use to match user manipulation</param>
            <param name="onSuspended">Action that end engagement process</param>
            <param name="onResumed">action for resuming</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SetOnCrashedHandler(System.Action{System.Exception})">
            <summary>
            Set the crashed handler.
            </summary>
            <param name="onCrashed">
            Callback when the app has been crashed.
            Takes one parameter : the crash string format.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IApplicationLifecycleManager.StoreInDeviceState">
            <summary>
            Store the engagement configuration in the device RAM to recover after a suspended state.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SetOnResumedHandler(System.Action)">
            <summary>
            Set the on resumed handler
            </summary>
            <param name="onResumed"></param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SessionState">
            <summary>
            Get or set the state of the current session.
            </summary>
            <value>
            The state of the session.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.IApplicationLifecycleManager.ActivityStarted">
            <summary>
            Get or set a value indicating whether an activity is started or not.
            </summary>
            <value>
              <c>true</c> if an activity is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.IApplicationLifecycleManager.CurrentActivityName">
            <summary>
            Get or set the name of the current activity.
            </summary>
            <value>
            The name of the current activity.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.IApplicationLifecycleManager.CurrentActivityExtras">
            <summary>
            Get or set the current activity extras.
            </summary>
            <value>
            The current activity extras.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.IApplicationLifecycleManager.IsTerminating">
            <summary>
            Get or set a value indicating whether the App is terminating or not.
            </summary>
            <value>
              <c>true</c> if the session is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Microsoft.Azure.Engagement.IApplicationLifecycleManager.ActivityIsStarted">
            <summary>
            Triggered each time an Activity starts.
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SessionIsIdled">
            <summary>
            This event occurs when the current session went just idled.
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Engagement.IApplicationLifecycleManager.SessionIsEnded">
            <summary>
            This event occurs when the current session has just finished.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.mSessionState">
            <summary>
            Indicate the state of the current session.
            </summary>
            <value>
            The state of the session.
            </value>
        </member>
        <member name="F:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.mActivityStarted">
            <summary>
            Indicate if an activity has been started.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.mCurrentActivityName">
            <summary>
            Name of the current activity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.mCurrentActivityExtras">
            <summary>
            Extras of the current activity.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SetOnSuspendEventHandler(System.Action)">
            <summary>
            Set the suspended handler.
            </summary>
            <param name="onSuspended">Callback when the app has been suspended.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SetOnVisibilityEventHandler(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set the visibility hide handler to improve data manipulation and send onVisibilityShow action
            </summary>
            <param name="onVisibilityHide">Action use to match user manipulation</param>
            <param name="onVisibilityShow">Action that end engagement process</param>
            <param name="onSuspended">Action use to match user manipulation</param>
            <param name="onResumed">action for resuming</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SetOnCrashedHandler(System.Action{System.Exception})">
            <summary>
            Set the crashed handler.
            </summary>
            <param name="onCrashed">Callback when the app has been crashed.
            Takes one parameter : the crash string format.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.StoreInDeviceState">
            <summary>
            Store the engagement configuration in the device RAM to recover after a suspended state. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SetOnResumedHandler(System.Action)">
            <summary>
            Set the on resumed handler
            </summary>
            <param name="onResumed"></param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SessionState">
            <summary>
            Get or set the state of the current session.
            </summary>
            <value>
            The state of the session.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.ActivityStarted">
            <summary>
            Gets or sets a value indicating whether an activity is started or not.
            </summary>
            <value>
              <c>true</c> if an activity is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.CurrentActivityName">
            <summary>
            Gets or sets the name of the current activity.
            </summary>
            <value>
            The name of the current activity.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.CurrentActivityExtras">
            <summary>
            Gets or sets the current activity extras.
            </summary>
            <value>
            The current activity extras.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.IsTerminating">
            <summary>
            Gets or sets a value indicating whether the App is terminating or not.
            </summary>
            <value>
              <c>true</c> if the session is started otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.ActivityIsStarted">
            <summary>
            This event occurs when an activity has just started.
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SessionIsIdled">
            <summary>
            This event occurs when the current session went just idled.
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Engagement.AbstractApplicationLifecycleManager.SessionIsEnded">
            <summary>
            This event occurs when the current session has just finished.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementLocationIpResult">
            <summary>
            DTO for the /ip-to-country result.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLocationIpResult.CountryCode">
            <summary>
            Country code.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLocationIpResult.IP">
            <summary>
            IP of the device
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.AbstractStorage`1">
            <summary>
            Storage base abstraction.
            Provide a common implementation for platform-dependent mechanismes.
            
            A subclass will only have to override the Inner* methods and handle the actual
            way to Save/Load/Delete a file.
            </summary>
            <typeparam name="T">A Engagement data</typeparam>
        </member>
        <member name="T:Microsoft.Azure.Engagement.IStorage`1">
            <summary>
            Engagement storage abstraction.
            </summary>
            <typeparam name="T">A Engagement data</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IStorage`1.Save(System.Collections.Generic.List{`0})">
            <summary>
            Save permanently a list of objects to the storage.
            Save WILL erase the old data.
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IStorage`1.Load">
            <summary>
            Load a list of objects from the storage.
            </summary>
            <returns>Data</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IStorage`1.Delete">
            <summary>
            Delete the storage.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractStorage`1.#ctor(System.String)">
            <summary>
            Initialize the storage.
            </summary>
            <param name="path">Storage location</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractStorage`1.Serialize(System.IO.Stream,System.Collections.Generic.List{`0})">
            <summary>
            Serialize a list of objects to a stream.
            </summary>
            <param name="stream">Stream</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractStorage`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a list of objets from a stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>Data</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractStorage`1.InnerSave(System.Collections.Generic.List{`0})">
            <summary>
            Abstract save mechanism (platform dependent).
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractStorage`1.InnerLoad">
            <summary>
            Abstract load mechanism (platform dependent).
            </summary>
            <returns>Data</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AbstractStorage`1.InnerDelete">
            <summary>
            Abstract delete mechanism (platform dependent).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AbstractStorage`1.Path">
            <summary>
            Storage location.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementData">
            <summary>
            Empty class to decorate an object that contains a data used by Engagement.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementLog">
            <summary>
            Engagement log.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLog.mName">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLog.mExtras">
            <summary>
            Log extras.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLog.mBody">
            <summary>
            Log string body.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLog.mCreationTime">
            <summary>
            Log creation time.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLog.mAttributes">
            <summary>
            Log attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.#ctor(System.String)">
            <summary>
            Create a new engagement log object
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.SetAttribute(System.String,System.String)">
            <summary>
            Add an attribute to the Engagement log.
            
            The key and value must not be null or composed of whitespaces.
            If an attribe has already been set, its value will be erased.
            
            The key and value are <b>trimmed</b>.
            </summary>
            <param name="key">Name of the attribute</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.SetExtras(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Int32)">
            <summary>
            Set the extras with a list of extras if the extras aren't null.
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            
            The extras are validated. Reasons to be invalid :
            - content greater than MAX_CONTENT_SIZE characters.
            
            Throw an EngagementInvalidLogException if invalid.
            </summary>
            <param name="extras">List of extras</param>
            <param name="limit">Limit (required)</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.SetExtras(System.Xml.Linq.XElement)">
            <summary>
            Set the extras with an XElement if not null.
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            
            No validation.
            Internal only.
            </summary>
            <param name="extras">Extras</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.RemoveExtras">
            <summary>
            Remove all the extras.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.SetBody(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Int32)">
            <summary>
            Set the body if the dictionary is not empty.
            If the body has been set before, erase it.
            
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            </summary>
            <param name="dict">Dictionary</param>
            <param name="limit">Limit (optional)</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.SetBody(System.String,System.Int32)">
            <summary>
            Set the body if the date is not null/whitespaces.
            If a body has been set before, erase it.
            
            CAREFUL : if the extras AND a body are set for this log, ONLY
            the extras are going to be converted.
            </summary>
            <param name="data">Body value</param>
            <param name="limit">Limit (optional)</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.RemoveBody">
            <summary>
            Remove the body.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.Validate(System.String,System.Int32)">
            <summary>
            Validate that a data is limited to a given size.
            If the limit is lesser or equal to 0, do nothing. 
            </summary>
            <param name="data">Data</param>
            <param name="limit">Limit</param>
            <exception cref="T:Microsoft.Azure.Engagement.EngagementInvalidLogException">The exception thrown if the body is greater than the limit.</exception>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.SetOffset(System.Int64)">
            <summary>
            Set the delta offset between the log sending time and the log creation time.
            </summary>
            <param name="sendingTime">Engagement log sending time</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.ToXml">
            <summary>
            Convert this object to an XML string
            </summary>
            <returns>A string containing this object as an XML</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLog.ToString">
            <summary>
            Return the XML form of this log
            </summary>
            <returns>The log as an XML string</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLog.Name">
            <summary>
            Name.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLog.Extras">
            <summary>
            Extras.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLog.Body">
            <summary>
            Body.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLog.CreationTime">
            <summary>
            Creation time.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementLog.Attributes">
            <summary>
            Attributes.
            DO NOT USE THIS.
            Only for serialization.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementAbstractMetadata">
            <summary>
            Engagement Metadata.
            This class contains :
            - the version number
            - the XML namespaces
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.XMLNS">
            <summary>
            Base XML namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.PUSH_XMLNS">
            <summary>
            Push XML namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.REACH_XMLNS">
            <summary>
            Reach XML namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.GEOLOC_XMLNS">
            <summary>
            Jabber Geoloc XML namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.KEY_STATE_ROOT">
            <summary>
            Key state root name.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.KEY_STATE_CONFIGURATION">
            <summary>
            Key to store the engagement configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.KEY_RESTORE_LAST_ACTIVITY">
            <summary>
            Key to store the last activity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementAbstractMetadata.KEY_STATE_REACH_STATE_MACHINE">
            <summary>
            Key to store the state machine last infos to the device state.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateSessionLog">
            <summary>
            Create a session log.
            </summary>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateActivityLog(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create an activity log.
            </summary>
            <param name="name">Name</param>
            <param name="extras">Extras</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateIdleLog">
            <summary>
            Create an idle log.
            <idle toffset="50000" sid="9b7bd28d0b7447a1903bb2f6ea91ca6d" id="23085e590a11446e9409d221541140dd"/>
            </summary>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateStartJobLog(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create a startJob log.
            </summary>
            <param name="name">Name</param>
            <param name="jobId">Id</param>
            <param name="extras">Extras</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateEndJobLog(System.String)">
            <summary>
            Create a endJob log.
            </summary>
            <param name="jobId">Id</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateBasicLog(System.String,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Boolean,System.String)">
            <summary>
            Create an event log.
            </summary>
            <param name="type">Type</param>
            <param name="name">Name</param>
            <param name="extras">Extras</param>
            <param name="session">Is a session event</param>
            <param name="jobId">Is a job event (and the jobid)</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateAppInfoLog(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create an appInfo log.
            </summary>
            <param name="appInfos">AppInfos</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateReachLog(System.String,System.String,System.String,System.String)">
            <summary>
            Create a reach log.
            <reach status="{status}" kind="{announcement|...}" contentid="{id}"/>
            </summary>
            <param name="status">The status, ie. displayed/actioned/exited, etc.</param>
            <param name="kind">The kind, ie. announcement/poll/etc.</param>
            <param name="contentId">The id of the reach message</param>
            <param name="body">Body of the reach message</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateCrashLog(System.String,System.String)">
            <summary>
            Create a crash log.
            </summary>
            <param name="crashId">Id</param>
            <param name="data">Crash dump</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateTechnicalsLog(System.String)">
            <summary>
            Create a technicals log.
            </summary>
            <param name="data">Data</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateLocationLog(System.Xml.Linq.XElement)">
            <summary>
            Create a location log.
            </summary>
            <param name="data">Data</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateGeolocationTag(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a geoloc log.
            </summary>
            <param name="latitude">Latitude (default to null)</param>
            <param name="longitude">Longitude (default to null)</param>
            <param name="countrycode">Country code (default to null)</param>
            <param name="region">Region (default to null)</param>
            <param name="locality">Locality (default to null)</param>
            <returns>Log</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.SetGeolocationChildTag(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Create a <geoloc/> child tag data.
            </summary>
            <param name="root">Root element</param>
            <param name="name">Name</param>
            <param name="data">Data</param>
            <returns>Child as string (empty if no data)</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.GetExtrasLimit">
            <summary>
            Extras limit.
            </summary>
            <returns>Size</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogBuilder.CreateUUID">
            <summary>
            Create a UUID.
            </summary>
            <returns>A UUID as a string</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.LogBuilder.SessionId">
            <summary>
            Session Id
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.LogBuilder.InfoId">
            <summary>
            Info Id (technicals)
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.LogBuilder.LocId">
            <summary>
            Location Id
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Engagement.LogBuilder.LocIdRead">
            <summary>
            Triggered when the locId value is read.
            The event arg contains the value of the locId.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.LogSpool">
            <summary>
            The LogSpool is made of a List of String contained in a file, thus no sent logs are saved
            even if application is closed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.LogSpool.SPOOL_LIMIT">
            <summary>
            Maximum logs in the spool.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.LogSpool.mLock">
            <summary>
            Global lock on the spool instance.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.LogSpool.mLogs">
            <summary>
            List of logs.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogSpool.#ctor(System.Collections.Generic.List{Microsoft.Azure.Engagement.EngagementLog})">
            <summary>
            Create a LogSpool instance.
            Will initialize a storage to a fixed location on the device.
            Will load the logs that hasn't been sent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogSpool.Add(Microsoft.Azure.Engagement.EngagementLog)">
            <summary>
            Add a log to the spool.
            </summary>
            <param name="log">The new log</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogSpool.CopyLogs">
            <summary>
            Create a copy of the logs awaiting in the spool.
            </summary>
            <returns>Logs copy</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogSpool.Delete(System.Int32)">
            <summary>
            Delete a certain number of logs from the spool and the storage.
            Delete the old ones first.
            
            For example, if :
            
              [0: "Sparrow", 1: "Obvious", 2: "Flam"]
              
            Delete(2) will let :
            
              [0: "Flam"]
              
            If the range is greater or equal than the number of logs,
            we simply delete the whole list.
            </summary>
            <param name="count">Number of logs to delete</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogSpool.Clear">
            <summary>
            Delete all logs from the spool and storage.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.LogSpool.IsEmpty">
            <summary>
            LogSpool emptiness.
            </summary>
            <returns><code>True</code> if the spool is empty, <code>false</code> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.LogSpool.Logs">
            <summary>
            Logs
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.SessionStates">
            <summary>
            The states available for a session :
            - Started: The end user has started his session and can perform activities.
            - Idled: The application went background, but is still running. The end user can't perform activities.
            - NotStarted: The session is not started so the end-user can't perform activities.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.IDeviceStatus">
            <summary>
            Device status.
            
            Allow to retrieve : 
            - Technicals
            - Device id
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IDeviceStatus.GetTechnicals">
            <summary>
            Retrieve the technicals.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IDeviceStatus.GetDeviceId">
            <summary>
            Get the device id.
            </summary>
            <returns>Device id</returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementIncorrectConfigurationException">
            <summary>
            Engagement incorrect configuration exception.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementException">
            <summary>
            Engagement base exception
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementException.#ctor(System.String)">
            <summary>
            Create a EngagementException
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementException.#ctor(System.String,System.Exception)">
            <summary>
            Create a EngagementException
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementIncorrectConfigurationException.#ctor(System.String)">
            <summary>
            Create a EngagementIncorrectConfigurationException
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementIncorrectConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a EngagementIncorrectConfigurationException
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementNotInitializedException">
            <summary>
            Engagement Agent not initialized exception.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotInitializedException.#ctor(System.String,System.String)">
            <summary>
            Create a EngagementInvalidLogException
            </summary>
            <param name="tag">Engagement Tag (Agent or Reach) from Engagement meta data</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementNotInitializedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a EngagementInvalidLogException
            </summary>
            <param name="tag">Engagement Tag (Agent or Reach) from Engagement meta data</param>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.BasicAuthHttpClient">
            <summary>
            Digest Authentication client for use in Windows Phone 7 Applications.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Send(System.Net.HttpWebRequest,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send a http request
            </summary>
            <param name="request">The request to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Send(System.Net.HttpWebRequest,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send a http request with data
            </summary>
            <param name="request">The request to send</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it instantly
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Post(System.String,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it instantly.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="data">The data to send</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it rightaway.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Post(System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a post request and send it rightaway.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a get request and send it instantly.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="parameters">The parameters of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.Get(System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Create a get request and send it instantly.
            </summary>
            <param name="uri">The uri of the request</param>
            <param name="callback">The callback to manage the result</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.CreateRequest(System.Uri,System.String)">
            <summary>
            Create a http request
            </summary>
            <param name="uri">The uri object of the request</param>
            <param name="method">
            The method of the request. 
            This method does not guarantee that the method must be a valid one.
            </param>
            <returns>The created request</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.CreateRequest(System.String,System.String)">
            <summary>
            Create a http request
            </summary>
            <param name="uri">The string uri of the request</param>
            <param name="method">
            The method of the request. 
            This method does not guarantee that the method must be a valid one.
            </param>
            <returns>The created request</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.CreatePostRequest(System.String)">
            <summary>
            Create a post http request.
            </summary>
            <param name="uri">Uri</param>
            <returns>Request</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.CreateGetRequest(System.String)">
            <summary>
            Create a get http request.
            </summary>
            <param name="uri">Uri</param>
            <returns>Request</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.CreateQueryString(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a query string from a dictionary and a uri
            </summary>
            <param name="uri">The base uri</param>
            <param name="parameters">The parameters</param>
            <returns>The query string with encoded values</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.IHttpClient.CreateQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a query string from a dictionary
            </summary>
            <param name="parameters">The parameters</param>
            <returns>The parameter part of a query string</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.HttpClient.CreateQueryString(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a quiry string for a uri and a list of parameters
            </summary>
            <param name="uri">API URI</param>
            <param name="parameters">Data</param>
            <returns>
            A query string.
            
            For example, if you call :
            
            $ CreateQueryString("http://example.com/api", { "value": "test", "info" : "42" });
            
            You get :
            
            $ "http://example.com/api?value=test&amp;info=42"
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.HttpClient.CreateQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a query string for a list of parameters
            </summary>
            <param name="parameters">Data</param>
            <returns>
            A query string.
            
            For example, if you call :
            
            $ CreateQueryString({ "value": "test", "info" : "42" });
            
            You get :
            
            $ "?value=test&amp;info=42"    
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.HttpClient.AddBody(System.Net.HttpWebRequest,System.String,System.Action,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Add a body to the request
            </summary>
            <param name="request">The http request</param>
            <param name="data">The data to add</param>
            <param name="callback">The result callback</param>
            <param name="baseCallback">The originated callback.</param>
        </member>
        <member name="F:Microsoft.Azure.Engagement.BasicAuthHttpClient.mStore">
            <summary>
            The engagement backend set a cookie containing a string used by the authentification.
            We must store it globally to give it to the authenticated request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.#ctor(System.String,System.String)">
            <summary>
            Initialize the digest authentication client with a username and password.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.Send(System.Net.HttpWebRequest,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send an http request.
            </summary>
            <param name="request">The http request</param>
            <param name="callback">Callback</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.Send(System.Net.HttpWebRequest,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Send an http request with data.
            </summary>
            <param name="request">The http request</param>
            <param name="data">Data to be sent</param>
            <param name="callback">Callback</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.SendSync(System.Net.HttpWebRequest,System.String)">
            <summary>
            Send a request synchronously. 
            The body will be set on the same thread.
            The request have a dedicated amount of time to complete otherwise it's aborted.
            
            This allows us to have a request that will not block the fast-switching
            feature of Windows Phone when returning on the app.
            
            CAREFUL : the digest auth will not processed when using this method.
            In Windows Phone there is no time to do such verbose process when App goes background.
            In Windows store App this process is, at least, performed when sending the Idle log just before Engagement being terminated.
            However, if the digest auth has been processed before this request,
            we will use the cookie container and it should work correctly.
            </summary>
            <param name="request">Request</param>
            <param name="data">Data</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.HandleResponse(System.Net.HttpWebResponse,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Handle the response, and invoke the callback depending on the result.
            </summary>
            <param name="response">The request's response</param>
            <param name="callback">On response callback</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.RequestCompleted(System.IAsyncResult,System.String,System.Action{System.String,System.Nullable{System.Net.HttpStatusCode}})">
            <summary>
            Request has been completed
            </summary>
            <param name="result">Http result</param>
            <param name="data">Sent data</param>
            <param name="callback">Callback</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.BasicAuthHttpClient.SetBasicAuthentificationHeader(System.Net.HttpWebRequest)">
            <summary>
            Generate correct header with authentification information
            </summary>
            <param name="request">The request to add header</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementHttpConfig">
            <summary>
            This class contains all the things related to the http configuration of Engagement :
            - Defaults urls
            - Properties to change the urls dynamically
            - Restore to defaults
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpConfig.ENGAGEMENT_DOMAIN">
            <summary>
            Engagement default domain.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpConfig.ENGAGEMENT_LOGGER_URL">
            <summary>
            Engagement default logger url.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpConfig.ENGAGEMENT_IP_TO_COUNTRY_URL">
            <summary>
            Engagement default ip-to-country API url.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpConfig.ENGAGEMENT_PUSH_TOKEN">
            <summary>
            Engagement default push command token url.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpConfig.ENGAGEMENT_PUSH_MESSAGES">
            <summary>
            Engagement default push command messages url.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpConfig.WAIT_FOR_LAST_LOGS">
            <summary>
            The amount of seconds to wait before aborting Engagement's last log sending.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpConfig.Reset">
            <summary>
            Reset the urls to the defaults ones.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpConfig.Instance">
            <summary>
            Http configuration instance
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpConfig.LoggerUrl">
            <summary>
            The url of the logger.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpConfig.IpToCountryUrl">
            <summary>
            The url of the ip-to-country API.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpConfig.PushTokenUrl">
            <summary>
            The url of the push token command.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpConfig.PushMessagesUrl">
            <summary>
            The url of the push messages command.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpConfig.WaitForLastLogs">
            <summary>
            The amount of seconds to wait before aborting Engagement's last log sending.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.STORAGE_PATH">
            <summary>
            Storage location.
            
            DO NOT CHANGE this value.
            Even if the name is weird, it's there for legacy reason.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.DEFAULT_BURST_THRESHOLD">
            <summary>
            Default value for the burst threshold.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.TIMEOUT">
            <summary>
            Request time out.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.sBurstThreshold">
            <summary>
            Delay between each request to the http logger.
            In milliseconds.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.mLogWorkerTask">
            <summary>
            The log worker asynchroneous task.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.mCancellationTokenSource">
            <summary>
            Task cancellation token.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.mTaskHandler">
            <summary>
            Task synchronization.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.mRetryHandler">
            <summary>
            Retry handling.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementHttpLogService.mIsDisabledInHardMode">
            <summary>
            Indicate if the application has been disabled by the backend (in hard mode).
            An application can be :
            - activated
            - disabled (soft mode)
            - disabled (hard mode)
            
            When an application is disabled in hard mode, no logs are stored and nothing 
            is send at all.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.#ctor(System.String,Microsoft.Azure.Engagement.INetworkStatus)">
            <summary>
            Initializes an Http log service.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="networkStatus">The network status.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.Open">
            <summary>
            Open the service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.Close">
            <summary>
            Close the service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.Run">
            <summary>
            Service task. Send the bundle, either in burst mode or in real-time
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.SendLog(Microsoft.Azure.Engagement.EngagementLog)">
            <summary>
            Tell to the service to send a new log.
            </summary>
            <param name="log">Log to send</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.SaveLogs">
            <summary>
            Save logs when app visibility change.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.SendLastBatch(System.Collections.Generic.List{Microsoft.Azure.Engagement.EngagementLog})">
            <summary>
            Add some logs to the spool, and try to send them, without waiting for a response.
            Use this method when the application is about to close.
            Because we do not wait for the response, the UI Thread will not be blocked if the 
            application is reactivated. The tradeoff is that the logs won't be cleaned from the
            spool, even if they reach the back-end.
            So we will re-send them when the application will be restarted. The back-end will delete
            them if it had already received the logs previously.
            </summary>
            <param name="lastLogs">Logs to send (generally, endJob, endSession and an eventual crash)</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.SendBundle">
            <summary>
            Send a bundle (list of logs).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.Send(System.String)">
            <summary>
            Send data to the engagement backend via http.
            </summary>
            <param name="data">Data</param>
            <returns>Return the http status code of the http request.
            If the request has been sent correctly, the exact
            status code will be returned.
            Otherwise, return a Request Timeout code (the request must be
            done in TIMEOUT seconds, otherwise, we will terminate it).
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.HandleError(System.Nullable{System.Net.HttpStatusCode},System.Collections.Generic.List{Microsoft.Azure.Engagement.EngagementLog})">
            <summary>
            Handle exceptionnal cases for a request, at a Engagement level
            (to change the state of the service, not to manage HTTP request).
            - Authentification error
            - Invalid app
            - Disabled app (soft or hard mode)
            </summary>
            <param name="code">The HTTP code status</param>
            <param name="sentLogs">Logs sent or tried to be sent.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.IsNetworkAvailable">
            <summary>
            Indicate if the network is available.
            Check also if the logger url exists.
            </summary>
            <returns>True if available, false otherwise (do not send logs in this case).</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.IsNotDisabledInHardMode">
            <summary>
            Indicate if the application has been hard disabled on the frontend.
            </summary>
            <returns>
            If it's disabled, print a message and return false.
            True otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.HasBurstThresholdActivated">
            <summary>
            Indicate if the burst threshold mode is activated.
            </summary>
            <returns>True if activated, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.PrepareLogsFromSpool">
            <summary>
            Get a prepared list of logs from the spool.
            Before sending logs, you should always use this method and
            work on this copy.
            </summary>
            <returns>A list of prepared logs</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.GetLoggerUrl">
            <summary>
            Get the url of the logger.
            </summary>
            <returns>URL as string</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementHttpLogService.ComputeUsername(System.String,System.String)">
            <summary>
            Compute a "username" with the engagement app config infos.
            </summary>
            <param name="appId">Engagement application id</param>
            <param name="deviceId">Engagement device id</param>
            <returns>Username</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpLogService.BurstThreshold">
            <summary>
            The burst threshold is the delay between each request to the logger.
            The value can be greater than one second. Otherwise, the threshold is reset to its default value,
            which will indicate to the connection that there is no threshold at all.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpLogService.Http">
            <summary>
            Http client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpLogService.LogSpool">
            <summary>
            LogSpool
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpLogService.NetworkStatus">
            <summary>
            Network status.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EngagementHttpLogService.WillTerminate">
            <summary>
            Will terminate
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.INetworkStatus">
            <summary>
            Network status encapsulation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.INetworkStatus.IsNetworkAvailable">
            <summary>
            Indicate if the network is available.
            </summary>
            <returns>True if available, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.INetworkStatus.SetNetworkChangeHandler(System.Action)">
            <summary>
            Add a handler on a network change.
            </summary>
            <param name="action">Handler</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.Coordinates">
            <summary>
            Coordinates representation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.Coordinates.Latitude">
            <summary>
            Latitude.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.Coordinates.Longitude">
            <summary>
            Longitude.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.ILocationStatus.GetCurrentPosition">
            <summary>
            Return the current position.
            </summary>
            <returns>Coordinates</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.ILocationStatus.SetLocationUpdateHandler(System.Double,System.Action)">
            <summary>
            Add the given callback to the onLocationUpdated event.
            </summary>
            <param name="movement">Movement threshold</param>
            <param name="action">Action to execute when the location has changed.</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.AgentFactory">
            <summary>
            Provide information and utilities inherent to the running platform.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.AgentFactory.sFactory">
            <summary>
            Unique static instance
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AgentFactory.CreateStorage``1(System.String)">
            <summary>
            Return an IStorage implementation.
            </summary>
            <typeparam name="T">Type of the storage</typeparam>
            <param name="path">Storage location path</param>
            <returns>IStorage implementation</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AgentFactory.CreateNetworkStatus">
            <summary>
            Return an INetworkStatus implementation.
            </summary>
            <returns>INetworkStatus implementation</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AgentFactory.CreateDeviceStatus">
            <summary>
            Return an IDeviceStatus implementation.
            </summary>
            <returns>IDeviceStatus implementation</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AgentFactory.CreateLocationStatus">
            <summary>
            Return an ILocationStatus implementation.
            </summary>
            <returns>ILocationStatus implementation</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AgentFactory.CreateApplicationLifecycleManager">
            <summary>
            Return an IApplicationLifecycleManager implementation.
            </summary>
            <returns>IApplicationLifecycleManager implementation</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.AgentFactory.GetDeviceId">
            <summary>
            Return a device id.
            </summary>
            <returns>Device id</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.AgentFactory.Instance">
            <summary>
            AgentFactory object
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementLocationService">
            <summary>
            Engagement location manager.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.GOOGLE_MAP_URI_GEOCODING">
            <summary>
            API URI.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.GOOGLE_MAP_URI_FORMAT">
            <summary>
            API format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.GOOGLE_MAP_STATUS_OK">
            <summary>
            API OK status.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.KEY_COUNTRYCODE">
            <summary>
            Country code key.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.KEY_REGION">
            <summary>
            Region key.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.KEY_LOCALITY">
            <summary>
            Locality key.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.MOVEMENT_THRESHOLD">
            <summary>
            Movement threshold for the location watcher.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.mHttp">
            <summary>
            Http client.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EngagementLocationService.mLocationStatus">
            <summary>
            Location status provider.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.GetLocationIpInformations(System.Action{System.String})">
            <summary>
            Call the /ip-to-country API to find the country code.
            </summary>
            <param name="callback">
            Task to execute when this method will end.
            Contains the country code as a string.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.GetCurrentPositionInformations(System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Get the informations about the current position.
            This method executes an asynchronous task, 
            and will call the given callback when the task is finished.
            </summary>
            <param name="callback">
            Task to execute when this method will end.
            Contains a dictionary with the `locality`, `region` and/or `countrycode`.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.GetCurrentPosition">
            <summary>
            Get the current position.
            </summary>
            <returns>Coordinates</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.CallGeocodeAPI(Microsoft.Azure.Engagement.Coordinates,System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Call the /geocode API.
            </summary>
            <param name="position">Current position</param>
            <param name="callback">Result callback, containg the informations.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.ConvertResult(System.String)">
            <summary>
            Convert a GeocodeResponse XML data to a dictionary containing:
            * {"countrycode" =&gt; "the country code"}
            * {"region" =&gt; "the region"}
            * {"locality" =&gt; "the city"}
            </summary>
            <param name="data">Xml</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementLocationService.AddElement(System.Xml.Linq.XElement,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get the value of the `childName` element of the component XElement.
            Put this value to a dictionary for a given `key`.
            </summary>
            <param name="component">Container</param>
            <param name="childName">Childname</param>
            <param name="dict">Dictionary</param>
            <param name="key">Dictionary key</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementJson`1">
            <summary>
            EngagementJson reader/writer.
            </summary>
            <typeparam name="T">Type of the object to read/write</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementJson`1.Read(System.String)">
            <summary>
            Read a json string and convert it to an object
            </summary>
            <param name="data">Json string</param>
            <returns>T object</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementJson`1.Write(`0)">
            <summary>
            Convert an object to a json string
            </summary>
            <param name="data">T object</param>
            <returns>Json string</returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementXml`1">
            <summary>
            Read xml from a string.
            We can not use the DataContractSerializer because we use attributes in our backend.
            Fallback to XmlSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementXml`1.Read(System.String)">
            <summary>
            Read a xml string and convert it to an object.
            </summary>
            <param name="data">Xml data</param>
            <returns>T object</returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EventArgs`1">
            <summary>
            Typed event args
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="F:Microsoft.Azure.Engagement.EventArgs`1.Empty">
            <summary>
            Empty constant for a typed event args
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EventArgs`1.#ctor(`0)">
            <summary>
            Create a typed event args
            </summary>
            <param name="value">Value of the specified type</param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.EventArgs`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EventExtensions">
            <summary>
            Event extension methods
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EventExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Raise an event. This extension allows us to bypass the existence test in our code.
            It checks if the event is not null, and call it if it's the case.
            Follow the .net guidelines for the event (eg. a sender and an EventArgs class).
            </summary>
            <param name="self">An EventHandler event</param>
            <param name="sender">The sender object</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EventExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raise an event. This extension allows us to bypass the existence test in our code.
            It checks if the event is not null, and call it if it's the case.
            Follow the .net guidelines for the event (eg. a sender and a derivated EventArgs class).
            </summary>
            <typeparam name="T">The type of the EventArgs subclass</typeparam>
            <param name="self">An EventHandler event</param>
            <param name="sender">The sender object</param>
            <param name="args">The EventArgs subclass</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementInvalidLogException">
            <summary>
            Engagement invalid log exception.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementInvalidLogException.#ctor(System.String)">
            <summary>
            Create a EngagementInvalidLogException.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementInvalidLogException.#ctor(System.String,System.Exception)">
            <summary>
            Create a EngagementInvalidLogException.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementComplexJson">
            <summary>
            EngagementComplexJson writer.
            Can serialize a dictionary, a list and other objects.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementComplexJson.Write(System.Object)">
            <summary>
            Convert an object to a json string
            </summary>
            <param name="data">Object</param>
            <returns>Json string</returns>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementComplexJson.Convert(System.Text.StringBuilder,System.Object)">
            <summary>
            Convert any value and write its output to a builder.
            Recursive function.
            </summary>
            <param name="builder">Output</param>
            <param name="data">Data to convert</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementComplexJson.WriteDictionary(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Convert a dictionary and write its output to a builder.
            </summary>
            <param name="builder">Output</param>
            <param name="dictionary">Dictionary to convert</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementComplexJson.WriteArray(System.Text.StringBuilder,System.Collections.IEnumerable)">
            <summary>
            Convert an array and write its output to a builder.
            </summary>
            <param name="builder">Output</param>
            <param name="array">Array to convert</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementComplexJson.WritePair(System.Text.StringBuilder,System.Object,System.Object)">
            <summary>
            Convert a pair and write its output to a builder.
            </summary>
            <param name="builder">Output</param>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.SHA256">
            <summary>
            The 'Abstraction' 'bridge' class for SHA256 purpose.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.SHA256.Hash128(System.String)">
            <summary>
            Hash128 function to implement in real SHA256 class.
            </summary>
            <param name="data">data to hash.</param>
            <returns>hashed data in hexadecimal output truncated to 128 bits.</returns>
        </member>
        <member name="P:Microsoft.Azure.Engagement.SHA256.Implementor">
            <summary>
            Real class implementor setter.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.SHA256Implementor">
            <summary>
            The 'Implementor' abstract class. Use on platforms specifique part.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.SHA256Implementor.Hash128(System.String)">
            <summary>
            Hash128 function to implement in real SHA256 class.
            </summary>
            <param name="data">data to hash.</param>
            <returns>hashed data in hexadecimal output truncated to 128 bits.</returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.Logger">
            <summary>
            Simple log wrapper
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Display a trace for debugging.
            
            Example :
            
              Debug("[Engagement]", "trace");
              $ "[Engagement] trace."
              
              Debug("[Engagement]", "trace", "more trace");
              $ "[Engagement] trace."
              $ "more trace"
            </summary>
            <param name="tag">Tag</param>
            <param name="message">Message</param>
            <param name="more">More content (line break before)</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Display an info trace.
            This trace is visible in release mode.
            
            Example :
            
              Info("[Engagement]", "trace");
              $ "[Engagement] trace."
            </summary>
            <param name="tag">Tag</param>
            <param name="message">Message</param>
            <param name="more">More content (line break before)</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Logger.CreateMessage(System.String,System.Object)">
            <summary>
            Create a log message.
            
            Example :
              
              CreateMessage("[Engagement]", "log");
              $ -&gt; "[Engagement] trace."
            </summary>
            <param name="tag">Tag</param>
            <param name="message">Message</param>
            <returns>Formatted message</returns>
        </member>
        <member name="T:Microsoft.Azure.Engagement.RetryHandler">
            <summary>
            Retry handling.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.RetryHandler.MAX_RETRY_THRESHOLD">
            <summary>
            Maximum time before a failed attempt and a new retry.
            In milliseconds : 60min (3.600.000 = 1000 * 60 * 60 = 60min)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.RetryHandler.BASE_RETRY_THRESHOLD">
            <summary>
            Base time before a failed attempt and a new retry.
            In milliseconds : 1s (1.000 = 1000 * 1 = 1s)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.RetryHandler.COEFFICIENT_RETRY_THRESHOLD">
            <summary>
            Coefficient to apply after each new attempt.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.RetryHandler.mAwaitHandler">
            <summary>
            Awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.RetryHandler.#ctor">
            <summary>
            Create a new retry handler.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.RetryHandler.Increase">
            <summary>
            Increate the current threshold, except if it has reached its max time.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.RetryHandler.AwaitAndIncrease">
            <summary>
            Increase the retry threshold, and pause the current thread for this time.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.RetryHandler.CancelAwait">
            <summary>
            Resume the current thread if it has been paused.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.RetryHandler.Reset">
            <summary>
            Reset the retry threshold.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Engagement.RetryHandler.Threshold">
            <summary>
            Retry threshold.
            Each time a request fails, we wait for a given time before a new attempt.
            This time is increased for each new attempt.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.CommandWorker">
            <summary>
            This class manages a Worker task wich goal is to execute each task from a command queue.
            It is a producer / consumer pattern, just enqueue task then the worker will execute one by one in FIFO order.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.CommandWorker.mCommandQueue">
            <summary>
            A list that stores all the commands that has been called before the service instanciation.
            When the service is ready, we replay these commands.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.CommandWorker.mListLock">
            <summary>
            Global lock on the action list.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.CommandWorker.mWorkerLock">
            <summary>
            Global lock on the worker start/stop methods.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.CommandWorker.mTaskHandler">
            <summary>
            Monitor for multi-thread management.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.CommandWorker.HeadCommand">
            <summary>
            The unique high priority command. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Engagement.CommandWorker.mProducer">
            <summary>
            The componenent's name that produces commands.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.#ctor(System.String)">
            <summary>
            The CancellationTokenSource and ManualResetEvent from the caller class or from this class references the same storage in memory.
            Even if them referenced values change they will point out the same object.
            </summary>
            <param name="producer">The componenent's name that produces commands.</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.Enqueue(System.Action)">
            <summary>
            Add a command to the spool. Then, signal the consumer task to execute it.
            </summary>
            <remarks>
            Any action enqueued in the command worker must not be time consuming and must not wait actions from UI thread. 
            This could block the deactivated/suspended App life cycle event as it is waiting for the last running command to finish.
            Also beware of the <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> method in silverlight, 
            it will stop the command worker responding as it is performing some work in the UI thread, it must be executed in a dedicated thread.
            </remarks>
            <param name="command">The new command</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.GetNextAction">
            <summary>
            Remove a command from the spool. Signal the consumer to wait if there is no more commands available in the spool.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.AddHeadAction(System.Action)">
            <summary>
            Set the current head command or replace it if it was already set.
            The head command is of the highest priority.
            </summary>
            <param name="command">The new command</param>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.Clear">
            <summary>
            Remove all commands from the spool.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.AsyncWorker(System.Threading.CancellationToken,System.Threading.ManualResetEvent)">
            <summary>
            The command consumer task.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.Start">
            <summary>
            Start or restart the worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.Stop">
            <summary>
            Stop the worker.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.CommandWorker.Execute(System.Action)">
            <summary>
            Execute a command and catch exceptions.
            </summary>
            <param name="command">Command</param>
        </member>
        <member name="P:Microsoft.Azure.Engagement.CommandWorker.AsyncWorkerTask">
            <summary>
            Get the command worker task.
            </summary>
            <value>
            The worker task.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Engagement.CommandWorker.CancellationTokenSource">
            <summary>
            Task cancellation token.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Engagement.Trace">
            <summary>
            Helper to write trace with the release configuration
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.Trace.WriteLine(System.String)">
            <summary>
            Write in the console.
            This traces are visible even with the release configuration.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:Microsoft.Azure.Engagement.EngagementViewModel">
            <summary>
            Abstract base class for the Engagement view models.
            Implements INotifyPropertyChanged.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementViewModel.#ctor">
            <summary>
            Create an empty view model
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Engagement.EngagementViewModel.NotifyPropertyChanged(System.String)">
            <summary>
            NotifyPropertyChanged implementation.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="E:Microsoft.Azure.Engagement.EngagementViewModel.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>DHHSkSmzaYkr7s20Kb4KHz9uNV0=</DigestValue></Reference></SignedInfo><SignatureValue>
    SvwXIsKvnvHYN9AYpRuLtly3ZxjgLhJSzSziFrTENAWTRd6yDtLFpNA6SvbGxrJay8LjPhHn
    E7jqam7WyCZwwFoDiK3De8U8Gi6GM+z2iSV7O1IuVu/BXGTL6mZ9ghyKinPI2g4KDkWNQubK
    CHys7DrqYWBAVQbPMhSZaJm9Cwy5UlXXS7RT89WKUmMuUGN+CFJhRHuRt9n/beIrKFSk7mHr
    hZFXHj1tdGlfKEQQMOX+MRrZIRVz1aibdZ8ROZ4RaTMGs0lvRvMb3vs96xSKlxydHdRd7aZW
    12CEjpGtXcVsB95dF1liaKIqaIkPwDctsAV/NWD8ub6BORSlSKOs5w==
  </SignatureValue><KeyInfo>
      <KeyValue>
        <RSAKeyValue>
          <Modulus>
            lnFd7QZG+oTLnVu3Rsew4bQROQOtsRVzYJzrp7ZuGjw//2XjNPGmpSFeVplsWOSSoQpcwtPc
            Ui8MZZogYUBTMZxsjyF9uvn+E1BSYJU6W7lYpXRhQamU4K0mTkyhl3BJJ158Z8pPHnGERrwd
            S7biD8XGJ8kH5noKpRcAGUxwRTgtgbRQqsVn0fp5vMXMoXKb9CU0mPhU3xI5OBIvpGulmn7H
            YtHcz+09NPi53zUwuux5MqnhqaxVTUx/TFbDEwt28Qf5zEes+4jVUqUeKPo9Lc/PhJiGcWUR
            z4XJCUSG4W/nsfysQESlqYsjP4JJndWWWVATWRhz/0MMrSvUfzBAZw==
          </Modulus>
          <Exponent>AQAB</Exponent>
        </RSAKeyValue>
      </KeyValue>
      <X509Data>
        <X509Certificate>
          MIIE7DCCA9SgAwIBAgITMwAAAMps1TISNcThVQABAAAAyjANBgkqhkiG9w0BAQUFADB5MQsw
          CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
          A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBT
          aWduaW5nIFBDQTAeFw0xNDA0MjIxNzM5MDBaFw0xNTA3MjIxNzM5MDBaMIGDMQswCQYDVQQG
          EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
          TWljcm9zb2Z0IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYDVQQDExVNaWNyb3Nv
          ZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCWcV3tBkb6
          hMudW7dGx7DhtBE5A62xFXNgnOuntm4aPD//ZeM08aalIV5WmWxY5JKhClzC09xSLwxlmiBh
          QFMxnGyPIX26+f4TUFJglTpbuVildGFBqZTgrSZOTKGXcEknXnxnyk8ecYRGvB1LtuIPxcYn
          yQfmegqlFwAZTHBFOC2BtFCqxWfR+nm8xcyhcpv0JTSY+FTfEjk4Ei+ka6Wafsdi0dzP7T00
          +LnfNTC67HkyqeGprFVNTH9MVsMTC3bxB/nMR6z7iNVSpR4o+j0tz8+EmIZxZRHPhckJRIbh
          b+ex/KxARKWpiyM/gkmd1ZZZUBNZGHP/QwytK9R/MEBnAgMBAAGjggFgMIIBXDATBgNVHSUE
          DDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUH17iXVCNVoa+SjzPBOinh7XLv4MwUQYDVR0RBEow
          SKRGMEQxDTALBgNVBAsTBE1PUFIxMzAxBgNVBAUTKjMxNTk1K2I0MjE4ZjEzLTZmY2EtNDkw
          Zi05YzQ3LTNmYzU1N2RmYzQ0MDAfBgNVHSMEGDAWgBTLEejK0rQWWAHJNy4zFha5TJoKHzBW
          BgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
          dWN0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsG
          AQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY0NvZFNpZ1BD
          QV8wOC0zMS0yMDEwLmNydDANBgkqhkiG9w0BAQUFAAOCAQEAd1zr15E9zb17g9mFqbBDnXN8
          F8kP7Tbbx7UsG177VAU6g3FAgQmit3EmXtZ9tmw7yapfXQMYKh0nfgfpxWUftc8Nt1THKDha
          iOd7wRm2VjK64szLk9uvbg9dRPXUsO8b1U7Brw7vIJvy4f4nXejF/2H2GdIoCiKd381wgp4Y
          ctgjzHosQ+7/6sDg5h2qnpczAFJvB7jTiGzepAY1p8JThmURdwmPNVm52IaoAP74MX0s9IwF
          ncDB1XdybOlNWSaD8cKyiFeTNQB8UCu8Wfz+HCk4gtPeUpdFKRhOlludul8bo/EnUOoHleht
          NA04V9w3KDWVOjic1O1qhV0OIhFeew==
        </X509Certificate>
      </X509Data>
      <X509Data>
        <X509Certificate>
          MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYK
          CZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRN
          aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcN
          MjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJ
          bWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
          dHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWE
          zbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0
          ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/k
          XG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF
          1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjn
          rOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e
          1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTN
          Az93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ
          34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAH
          Muouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yq
          hv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
          FgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEF
          BQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXx
          BLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/k
          bQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3s
          u77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcr
          SwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZ
          EjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr
          8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21ad
          laBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1
          h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99
          ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da
        </X509Certificate>
      </X509Data>
      <X509Data>
        <X509Certificate>
          MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPy
          LGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3Nv
          ZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMx
          MjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
          UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNy
          b3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
          ALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1
          VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJca
          p6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKN
          Yv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3n
          rAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFa
          MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1Ud
          DwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGY
          YDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJg
          QFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29m
          dC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUH
          AQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRz
          L01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEy
          tWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3
          PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa
          8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5
          Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU
          8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18
          KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUe
          DordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z5
          2Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZo
          gwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/
          aZuW4hCoELQ3UAjWwz0=
        </X509Certificate>
      </X509Data>
    </KeyInfo><Object id="ts-countersig"><X509Data><X509Certificate>MIIEuzCCA6OgAwIBAgITMwAAAFwJq3ADEfxcFQAAAAAAXDANBgkqhkiG9w0BAQUFADB3MQswCQYD
VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
TWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Ew
HhcNMTQwNTIzMTcxMzE2WhcNMTUwODIzMTcxMzE2WjCBqzELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AldBMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDTAL
BgNVBAsTBE1PUFIxJzAlBgNVBAsTHm5DaXBoZXIgRFNFIEVTTjpCQkVDLTMwQ0EtMkRCRTElMCMG
A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEP
ADCCAQoCggEBANYJa/7h+ToIHrYOs0PLI95ObOJZcc75TxmjL8QLy/H1Xyl5ielMpmU8xUtMXQHp
/i9QvCCDC5hHW5nqTZ/eqcsjlYzk07XcemMgs/L/r8dp/5K7jQpF7punPfdkmj6O6rRaABbNqeXV
TJUmQH8DmFyk6dBH1jblvqVRQb9b9uyuNN9K8gXa/fw9YY6yEa11unZrY2JOJSHPpz88ub9uBEMk
HrvplbnGydEgydhVI1Xnsr+vLVxathcwcTMQJH5xnrFl4ma2BdMyV0nEYhPYkoyBkY8zQ5EZbBL0
eRTm5Z/F5anhM0C22y9X05U2It3yQqmUtGTTgSMUlMPZRhdm3r0CAwEAAaOCAQkwggEFMB0GA1Ud
DgQWBBR/kUhDg4fJeBzpVcW521b4F9FHBDAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7syuwwzWz
DzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
dWN0cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsGAQUFBwEBBEwwSjBIBggrBgEFBQcw
AoY8aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRUaW1lU3RhbXBQ
Q0EuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQCCCVb4b+5GzEwp
9r7Tx2pf+V2EABkXgYloZBU/wUQ2OxhtBMusE7eOlOMt66P0QnxE0QnsWr7nk9OEcuKP1R3VOVP7
ciILZpI7ysqr+s/MZE7GRGyv4IOOFBG4sJBJn8OmlM+D4BFiWqtYo7hhlyR2rG1D947qHfOI/ipL
7h/0HW2sIEyIAEAutLlI2tHEbsGt9DOFYQuJLF5rygNjUkox7r1VwxCnUaiSrxJgxZxdRmPTzOqf
NcatCSB0hTUbRRKzllHhye2bgOV25fdWhesgnCiRVPtoulaFg1Vh/4hAXLENJgejxVfsFXkPlvSO
dqGKZ1qNf05i9H7fEKDWFLqX</X509Certificate></X509Data><X509Data><X509Certificate>MIIGBzCCA++gAwIBAgIKYRZoNAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQB
GRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9v
dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1MzA5WhcNMjEwNDAzMTMwMzA5WjB3
MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFt
cCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZ
USNQrc7dGE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr6Hu97IkHD/cOBJjwicwfyzMk
h53y9GccLPx754gd6udOo6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDlKEYuJ6yGT1VS
DOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd++NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSn
EUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68eeEExd8yb3zuDk6FhArUdDbH895uyAc4i
S1T/+QXDwiALAgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQjNPjZUkZw
Cu1A+3b7syuwwzWzDzALBgNVHQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1UdIwSBkDCB
jYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6RhMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJ
kiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
IEF1dGhvcml0eYIQea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3Js
Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYI
KwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2Nl
cnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0B
AQUFAAOCAgEAEJeKw1wDRDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxtYrhXAstOIBNQ
md16QOJXu69YmhzhHQGGrLt48ovQ7DsB7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mR
KiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVRDupiXD8WmIsgP+IHGjL5zDFKdjE9K3IL
yOpwPf+FChPfwgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4ZVxbARcKFA7S2hSY9Ty5
ZlizLS/n+YWGzFFW6J1wlGysOUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89Ds+X57H21
46SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BNZ8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RI
zCzU2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LBJ1S2sWo9iaF2YbRuoROmv6pH8BJv
/YoybLL+31HIjCPJZr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCleKuzoJZ1GtmShxN1
Ii8yqAhuoFuMJb+g74TKIdbrHk/Jmu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6L54/
LlUWa8kTo/0=</X509Certificate></X509Data><CounterSignature xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003" ts-format="cms-timestamp-message">MIIGyQYJKoZIhvcNAQcCoIIGujCCBrYCAQMxCzAJBgUrDgMCGgUAMIIBEwYJKoZIhvcNAQcBoIIB
BASCAQBK/Bciwq+e8dg30BilG4u2XLdnGOAuElLNLOIWtMQ0BZNF3rIO0sWk0DpK9sbGslrLwuM+
EecTuOpqbtbIJnDAWgOIrcN7xTwaLoYz7PaJJXs7Ui5W78FcZMvqZn2CHIqKc8jaDgoORY1C5soI
fKzsOuphYEBVBs8yFJlomb0LDLlSVddLtFPz1YpSYy5QY34IUmFEe5G32f9t4isoVKTuYeuFkVce
PW10aV8oRBAw5f4xGtkhFXPVqJt1nxE5nhFpMwazSW9G8xve+z3rFIqXHJ0d1F3tplbXYISOka1d
xWwH3l0XWWJooipoiQ/ANy2wBX81YPy5voE5FKVIo6znoIIDcqGCA24wggJWAgEBMIHboYGxpIGu
MIGrMQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjENMAsGA1UECxMETU9QUjEnMCUGA1UECxMebkNpcGhlciBE
U0UgRVNOOkJCRUMtMzBDQS0yREJFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2
aWNloiUKAQEwCQYFKw4DAhoFAAMVAMzPJzSA2L82tIXhvLtB9rgR4suooIHCMIG/pIG8MIG5MQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMScwJQYDVQQLEx5uQ2lwaGVy
IE5UUyBFU046NTdGNi1DMUUwLTU1NEMxKzApBgNVBAMTIk1pY3Jvc29mdCBUaW1lIFNvdXJjZSBN
YXN0ZXIgQ2xvY2swDQYJKoZIhvcNAQEFBQACBQDYjKFKMCIYDzIwMTUwMjE2MTcwMzA2WhgPMjAx
NTAyMTcxNzAzMDZaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIFANiMoUoCAQAwBwIBAAICGxQwBwIB
AAICGCwwCgIFANiN8soCAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAaAKMAgCAQAC
AxbjYKEKMAgCAQACAwehIDANBgkqhkiG9w0BAQUFAAOCAQEAQD0GO8+og6jiNX/gWgA/OAgOGHks
fwZOoX3oW/fDYeNGHfHmt2NzXij66OzL3M0Z2sIZJEU5sXj8kKoDx5hMRbAgvkWawDU41d2mL30Y
0Tp5s8tskz7/P8whgweU+GlI4eEHY7Mm+IUmlZNlT+/hluOnG0UUNPHqRVYqjrs2RRvBnES+RShJ
Os4Rkc3Xa/t+SaXUjVBhoz6STHbwvCaiulqHr7/nU4exMgI83f7ijxIuLFrpFbsFUB1vynBamfm5
EoTS2DhB2iNu/hpmVMTRLJ1K4I4H+/NqMxMl9R+/AAaQRBnbGTAszheeMgX2RQT3ezwnlES9H2M1
04Yr3GtzXDGCAhUwggIRAgEBMIGOMHcxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xITAfBgNV
BAMTGE1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQQITMwAAAFwJq3ADEfxcFQAAAAAAXDAJBgUrDgMC
GgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTUwMjE3MDMz
NzQxWjAjBgkqhkiG9w0BCQQxFgQUlaYkjiPQ2+a3KH1of6vYD88FC5swDQYJKoZIhvcNAQEFBQAE
ggEAzPVLeQKHSuplHnzsG5Fj8MXXjwqRWQZsui51znb9r0rRgfKFUiXevK9A+WOHFZuVMpTdnqAN
XVSSIwF1I2iE6NQJCrLcPN+zVUPDPsp3md+6TPuCOCKC90tnQgBHr++5Rw8H0GbIvvAQdEGFjulO
oqbAYrl+b4MJqYsraw/AJieIM5DLjcPNk1MYQwtyBljeQAgJiBtT7bXbDwtJAu5zn2qdf71iS4Ub
PVmq9cowxEbXMjQ9+dh6bbW2E7D+q+Qh3YJrsnD9TvkoizTjEYexILHr7Z7XbEtn30uqsJg/JzBJ
uTaswqT2afKsVxus2Bgn0ANcL5i0koH2xtKzqtwkCA==</CounterSignature></Object></Signature></doc>